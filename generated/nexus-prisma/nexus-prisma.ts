/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      WeChat: WeChatObject
      WeChatUser: WeChatUserObject
      Avatar: AvatarObject
      FileIndex: FileIndexObject
      Message: MessageObject
      ChatRoom: ChatRoomObject
      Content: ContentObject
      Text: TextObject
      Image: ImageObject
      Voice: VoiceObject
      Video: VideoObject
      File: FileObject
      App: AppObject
      Contact: ContactObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      WeChatConnection: WeChatConnectionObject
      WeChatEdge: WeChatEdgeObject
      AggregateWeChat: AggregateWeChatObject
      WeChatUserConnection: WeChatUserConnectionObject
      WeChatUserEdge: WeChatUserEdgeObject
      AggregateWeChatUser: AggregateWeChatUserObject
      ChatRoomConnection: ChatRoomConnectionObject
      ChatRoomEdge: ChatRoomEdgeObject
      AggregateChatRoom: AggregateChatRoomObject
      AvatarConnection: AvatarConnectionObject
      AvatarEdge: AvatarEdgeObject
      AggregateAvatar: AggregateAvatarObject
      ContactConnection: ContactConnectionObject
      ContactEdge: ContactEdgeObject
      AggregateContact: AggregateContactObject
      MessageConnection: MessageConnectionObject
      MessageEdge: MessageEdgeObject
      AggregateMessage: AggregateMessageObject
      ContentConnection: ContentConnectionObject
      ContentEdge: ContentEdgeObject
      AggregateContent: AggregateContentObject
      TextConnection: TextConnectionObject
      TextEdge: TextEdgeObject
      AggregateText: AggregateTextObject
      ImageConnection: ImageConnectionObject
      ImageEdge: ImageEdgeObject
      AggregateImage: AggregateImageObject
      VoiceConnection: VoiceConnectionObject
      VoiceEdge: VoiceEdgeObject
      AggregateVoice: AggregateVoiceObject
      VideoConnection: VideoConnectionObject
      VideoEdge: VideoEdgeObject
      AggregateVideo: AggregateVideoObject
      FileConnection: FileConnectionObject
      FileEdge: FileEdgeObject
      AggregateFile: AggregateFileObject
      AppConnection: AppConnectionObject
      AppEdge: AppEdgeObject
      AggregateApp: AggregateAppObject
      FileIndexConnection: FileIndexConnectionObject
      FileIndexEdge: FileIndexEdgeObject
      AggregateFileIndex: AggregateFileIndexObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      WeChatSubscriptionPayload: WeChatSubscriptionPayloadObject
      WeChatPreviousValues: WeChatPreviousValuesObject
      WeChatUserSubscriptionPayload: WeChatUserSubscriptionPayloadObject
      WeChatUserPreviousValues: WeChatUserPreviousValuesObject
      ChatRoomSubscriptionPayload: ChatRoomSubscriptionPayloadObject
      ChatRoomPreviousValues: ChatRoomPreviousValuesObject
      AvatarSubscriptionPayload: AvatarSubscriptionPayloadObject
      AvatarPreviousValues: AvatarPreviousValuesObject
      ContactSubscriptionPayload: ContactSubscriptionPayloadObject
      ContactPreviousValues: ContactPreviousValuesObject
      MessageSubscriptionPayload: MessageSubscriptionPayloadObject
      MessagePreviousValues: MessagePreviousValuesObject
      ContentSubscriptionPayload: ContentSubscriptionPayloadObject
      ContentPreviousValues: ContentPreviousValuesObject
      TextSubscriptionPayload: TextSubscriptionPayloadObject
      TextPreviousValues: TextPreviousValuesObject
      ImageSubscriptionPayload: ImageSubscriptionPayloadObject
      ImagePreviousValues: ImagePreviousValuesObject
      VoiceSubscriptionPayload: VoiceSubscriptionPayloadObject
      VoicePreviousValues: VoicePreviousValuesObject
      VideoSubscriptionPayload: VideoSubscriptionPayloadObject
      VideoPreviousValues: VideoPreviousValuesObject
      FileSubscriptionPayload: FileSubscriptionPayloadObject
      FilePreviousValues: FilePreviousValuesObject
      AppSubscriptionPayload: AppSubscriptionPayloadObject
      AppPreviousValues: AppPreviousValuesObject
      FileIndexSubscriptionPayload: FileIndexSubscriptionPayloadObject
      FileIndexPreviousValues: FileIndexPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      WeChat: WeChatFieldDetails
      WeChatUser: WeChatUserFieldDetails
      Avatar: AvatarFieldDetails
      FileIndex: FileIndexFieldDetails
      Message: MessageFieldDetails
      ChatRoom: ChatRoomFieldDetails
      Content: ContentFieldDetails
      Text: TextFieldDetails
      Image: ImageFieldDetails
      Voice: VoiceFieldDetails
      Video: VideoFieldDetails
      File: FileFieldDetails
      App: AppFieldDetails
      Contact: ContactFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      WeChatConnection: WeChatConnectionFieldDetails
      WeChatEdge: WeChatEdgeFieldDetails
      AggregateWeChat: AggregateWeChatFieldDetails
      WeChatUserConnection: WeChatUserConnectionFieldDetails
      WeChatUserEdge: WeChatUserEdgeFieldDetails
      AggregateWeChatUser: AggregateWeChatUserFieldDetails
      ChatRoomConnection: ChatRoomConnectionFieldDetails
      ChatRoomEdge: ChatRoomEdgeFieldDetails
      AggregateChatRoom: AggregateChatRoomFieldDetails
      AvatarConnection: AvatarConnectionFieldDetails
      AvatarEdge: AvatarEdgeFieldDetails
      AggregateAvatar: AggregateAvatarFieldDetails
      ContactConnection: ContactConnectionFieldDetails
      ContactEdge: ContactEdgeFieldDetails
      AggregateContact: AggregateContactFieldDetails
      MessageConnection: MessageConnectionFieldDetails
      MessageEdge: MessageEdgeFieldDetails
      AggregateMessage: AggregateMessageFieldDetails
      ContentConnection: ContentConnectionFieldDetails
      ContentEdge: ContentEdgeFieldDetails
      AggregateContent: AggregateContentFieldDetails
      TextConnection: TextConnectionFieldDetails
      TextEdge: TextEdgeFieldDetails
      AggregateText: AggregateTextFieldDetails
      ImageConnection: ImageConnectionFieldDetails
      ImageEdge: ImageEdgeFieldDetails
      AggregateImage: AggregateImageFieldDetails
      VoiceConnection: VoiceConnectionFieldDetails
      VoiceEdge: VoiceEdgeFieldDetails
      AggregateVoice: AggregateVoiceFieldDetails
      VideoConnection: VideoConnectionFieldDetails
      VideoEdge: VideoEdgeFieldDetails
      AggregateVideo: AggregateVideoFieldDetails
      FileConnection: FileConnectionFieldDetails
      FileEdge: FileEdgeFieldDetails
      AggregateFile: AggregateFileFieldDetails
      AppConnection: AppConnectionFieldDetails
      AppEdge: AppEdgeFieldDetails
      AggregateApp: AggregateAppFieldDetails
      FileIndexConnection: FileIndexConnectionFieldDetails
      FileIndexEdge: FileIndexEdgeFieldDetails
      AggregateFileIndex: AggregateFileIndexFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      WeChatSubscriptionPayload: WeChatSubscriptionPayloadFieldDetails
      WeChatPreviousValues: WeChatPreviousValuesFieldDetails
      WeChatUserSubscriptionPayload: WeChatUserSubscriptionPayloadFieldDetails
      WeChatUserPreviousValues: WeChatUserPreviousValuesFieldDetails
      ChatRoomSubscriptionPayload: ChatRoomSubscriptionPayloadFieldDetails
      ChatRoomPreviousValues: ChatRoomPreviousValuesFieldDetails
      AvatarSubscriptionPayload: AvatarSubscriptionPayloadFieldDetails
      AvatarPreviousValues: AvatarPreviousValuesFieldDetails
      ContactSubscriptionPayload: ContactSubscriptionPayloadFieldDetails
      ContactPreviousValues: ContactPreviousValuesFieldDetails
      MessageSubscriptionPayload: MessageSubscriptionPayloadFieldDetails
      MessagePreviousValues: MessagePreviousValuesFieldDetails
      ContentSubscriptionPayload: ContentSubscriptionPayloadFieldDetails
      ContentPreviousValues: ContentPreviousValuesFieldDetails
      TextSubscriptionPayload: TextSubscriptionPayloadFieldDetails
      TextPreviousValues: TextPreviousValuesFieldDetails
      ImageSubscriptionPayload: ImageSubscriptionPayloadFieldDetails
      ImagePreviousValues: ImagePreviousValuesFieldDetails
      VoiceSubscriptionPayload: VoiceSubscriptionPayloadFieldDetails
      VoicePreviousValues: VoicePreviousValuesFieldDetails
      VideoSubscriptionPayload: VideoSubscriptionPayloadFieldDetails
      VideoPreviousValues: VideoPreviousValuesFieldDetails
      FileSubscriptionPayload: FileSubscriptionPayloadFieldDetails
      FilePreviousValues: FilePreviousValuesFieldDetails
      AppSubscriptionPayload: AppSubscriptionPayloadFieldDetails
      AppPreviousValues: AppPreviousValuesFieldDetails
      FileIndexSubscriptionPayload: FileIndexSubscriptionPayloadFieldDetails
      FileIndexPreviousValues: FileIndexPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      WeChatWhereInput: WeChatWhereInputInputObject
      WeChatUserWhereInput: WeChatUserWhereInputInputObject
      AvatarWhereInput: AvatarWhereInputInputObject
      FileIndexWhereInput: FileIndexWhereInputInputObject
      MessageWhereInput: MessageWhereInputInputObject
      ChatRoomWhereInput: ChatRoomWhereInputInputObject
      ContentWhereInput: ContentWhereInputInputObject
      TextWhereInput: TextWhereInputInputObject
      ImageWhereInput: ImageWhereInputInputObject
      VoiceWhereInput: VoiceWhereInputInputObject
      VideoWhereInput: VideoWhereInputInputObject
      FileWhereInput: FileWhereInputInputObject
      AppWhereInput: AppWhereInputInputObject
      ContactWhereInput: ContactWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      WeChatWhereUniqueInput: WeChatWhereUniqueInputInputObject
      WeChatUserWhereUniqueInput: WeChatUserWhereUniqueInputInputObject
      ChatRoomWhereUniqueInput: ChatRoomWhereUniqueInputInputObject
      AvatarWhereUniqueInput: AvatarWhereUniqueInputInputObject
      ContactWhereUniqueInput: ContactWhereUniqueInputInputObject
      MessageWhereUniqueInput: MessageWhereUniqueInputInputObject
      ContentWhereUniqueInput: ContentWhereUniqueInputInputObject
      TextWhereUniqueInput: TextWhereUniqueInputInputObject
      ImageWhereUniqueInput: ImageWhereUniqueInputInputObject
      VoiceWhereUniqueInput: VoiceWhereUniqueInputInputObject
      VideoWhereUniqueInput: VideoWhereUniqueInputInputObject
      FileWhereUniqueInput: FileWhereUniqueInputInputObject
      AppWhereUniqueInput: AppWhereUniqueInputInputObject
      FileIndexWhereUniqueInput: FileIndexWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      WeChatCreateManyInput: WeChatCreateManyInputInputObject
      WeChatCreateInput: WeChatCreateInputInputObject
      WeChatUserCreateOneInput: WeChatUserCreateOneInputInputObject
      WeChatUserCreateInput: WeChatUserCreateInputInputObject
      AvatarCreateOneInput: AvatarCreateOneInputInputObject
      AvatarCreateInput: AvatarCreateInputInputObject
      FileIndexCreateOneInput: FileIndexCreateOneInputInputObject
      FileIndexCreateInput: FileIndexCreateInputInputObject
      MessageCreateManyWithoutTalkerInput: MessageCreateManyWithoutTalkerInputInputObject
      MessageCreateWithoutTalkerInput: MessageCreateWithoutTalkerInputInputObject
      ChatRoomCreateOneWithoutMessageInput: ChatRoomCreateOneWithoutMessageInputInputObject
      ChatRoomCreateWithoutMessageInput: ChatRoomCreateWithoutMessageInputInputObject
      WeChatUserCreateOneWithoutHaveChatRoomInput: WeChatUserCreateOneWithoutHaveChatRoomInputInputObject
      WeChatUserCreateWithoutHaveChatRoomInput: WeChatUserCreateWithoutHaveChatRoomInputInputObject
      ChatRoomCreateManyWithoutMemberListInput: ChatRoomCreateManyWithoutMemberListInputInputObject
      ChatRoomCreateWithoutMemberListInput: ChatRoomCreateWithoutMemberListInputInputObject
      MessageCreateManyWithoutChatRoomInput: MessageCreateManyWithoutChatRoomInputInputObject
      MessageCreateWithoutChatRoomInput: MessageCreateWithoutChatRoomInputInputObject
      WeChatUserCreateOneWithoutMessageInput: WeChatUserCreateOneWithoutMessageInputInputObject
      WeChatUserCreateWithoutMessageInput: WeChatUserCreateWithoutMessageInputInputObject
      ChatRoomCreateManyWithoutOwnerInput: ChatRoomCreateManyWithoutOwnerInputInputObject
      ChatRoomCreateWithoutOwnerInput: ChatRoomCreateWithoutOwnerInputInputObject
      WeChatUserCreateManyWithoutJoinChatRoomInput: WeChatUserCreateManyWithoutJoinChatRoomInputInputObject
      WeChatUserCreateWithoutJoinChatRoomInput: WeChatUserCreateWithoutJoinChatRoomInputInputObject
      ContactCreateOneWithoutWeChatUserInput: ContactCreateOneWithoutWeChatUserInputInputObject
      ContactCreateWithoutWeChatUserInput: ContactCreateWithoutWeChatUserInputInputObject
      ContentCreateOneInput: ContentCreateOneInputInputObject
      ContentCreateInput: ContentCreateInputInputObject
      TextCreateOneWithoutContentInput: TextCreateOneWithoutContentInputInputObject
      TextCreateWithoutContentInput: TextCreateWithoutContentInputInputObject
      ImageCreateOneWithoutContentInput: ImageCreateOneWithoutContentInputInputObject
      ImageCreateWithoutContentInput: ImageCreateWithoutContentInputInputObject
      VoiceCreateOneWithoutContentInput: VoiceCreateOneWithoutContentInputInputObject
      VoiceCreateWithoutContentInput: VoiceCreateWithoutContentInputInputObject
      VideoCreateOneWithoutContentInput: VideoCreateOneWithoutContentInputInputObject
      VideoCreateWithoutContentInput: VideoCreateWithoutContentInputInputObject
      FileCreateOneWithoutContentInput: FileCreateOneWithoutContentInputInputObject
      FileCreateWithoutContentInput: FileCreateWithoutContentInputInputObject
      AppCreateOneWithoutContentInput: AppCreateOneWithoutContentInputInputObject
      AppCreateWithoutContentInput: AppCreateWithoutContentInputInputObject
      WeChatUserCreateManyInput: WeChatUserCreateManyInputInputObject
      ChatRoomCreateManyInput: ChatRoomCreateManyInputInputObject
      ChatRoomCreateInput: ChatRoomCreateInputInputObject
      MessageCreateManyInput: MessageCreateManyInputInputObject
      MessageCreateInput: MessageCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      WeChatUpdateManyInput: WeChatUpdateManyInputInputObject
      WeChatUpdateWithWhereUniqueNestedInput: WeChatUpdateWithWhereUniqueNestedInputInputObject
      WeChatUpdateDataInput: WeChatUpdateDataInputInputObject
      WeChatUserUpdateOneRequiredInput: WeChatUserUpdateOneRequiredInputInputObject
      WeChatUserUpdateDataInput: WeChatUserUpdateDataInputInputObject
      AvatarUpdateOneInput: AvatarUpdateOneInputInputObject
      AvatarUpdateDataInput: AvatarUpdateDataInputInputObject
      FileIndexUpdateOneInput: FileIndexUpdateOneInputInputObject
      FileIndexUpdateDataInput: FileIndexUpdateDataInputInputObject
      FileIndexUpsertNestedInput: FileIndexUpsertNestedInputInputObject
      AvatarUpsertNestedInput: AvatarUpsertNestedInputInputObject
      MessageUpdateManyWithoutTalkerInput: MessageUpdateManyWithoutTalkerInputInputObject
      MessageUpdateWithWhereUniqueWithoutTalkerInput: MessageUpdateWithWhereUniqueWithoutTalkerInputInputObject
      MessageUpdateWithoutTalkerDataInput: MessageUpdateWithoutTalkerDataInputInputObject
      ChatRoomUpdateOneWithoutMessageInput: ChatRoomUpdateOneWithoutMessageInputInputObject
      ChatRoomUpdateWithoutMessageDataInput: ChatRoomUpdateWithoutMessageDataInputInputObject
      WeChatUserUpdateOneRequiredWithoutHaveChatRoomInput: WeChatUserUpdateOneRequiredWithoutHaveChatRoomInputInputObject
      WeChatUserUpdateWithoutHaveChatRoomDataInput: WeChatUserUpdateWithoutHaveChatRoomDataInputInputObject
      ChatRoomUpdateManyWithoutMemberListInput: ChatRoomUpdateManyWithoutMemberListInputInputObject
      ChatRoomUpdateWithWhereUniqueWithoutMemberListInput: ChatRoomUpdateWithWhereUniqueWithoutMemberListInputInputObject
      ChatRoomUpdateWithoutMemberListDataInput: ChatRoomUpdateWithoutMemberListDataInputInputObject
      MessageUpdateManyWithoutChatRoomInput: MessageUpdateManyWithoutChatRoomInputInputObject
      MessageUpdateWithWhereUniqueWithoutChatRoomInput: MessageUpdateWithWhereUniqueWithoutChatRoomInputInputObject
      MessageUpdateWithoutChatRoomDataInput: MessageUpdateWithoutChatRoomDataInputInputObject
      WeChatUserUpdateOneRequiredWithoutMessageInput: WeChatUserUpdateOneRequiredWithoutMessageInputInputObject
      WeChatUserUpdateWithoutMessageDataInput: WeChatUserUpdateWithoutMessageDataInputInputObject
      ChatRoomUpdateManyWithoutOwnerInput: ChatRoomUpdateManyWithoutOwnerInputInputObject
      ChatRoomUpdateWithWhereUniqueWithoutOwnerInput: ChatRoomUpdateWithWhereUniqueWithoutOwnerInputInputObject
      ChatRoomUpdateWithoutOwnerDataInput: ChatRoomUpdateWithoutOwnerDataInputInputObject
      WeChatUserUpdateManyWithoutJoinChatRoomInput: WeChatUserUpdateManyWithoutJoinChatRoomInputInputObject
      WeChatUserUpdateWithWhereUniqueWithoutJoinChatRoomInput: WeChatUserUpdateWithWhereUniqueWithoutJoinChatRoomInputInputObject
      WeChatUserUpdateWithoutJoinChatRoomDataInput: WeChatUserUpdateWithoutJoinChatRoomDataInputInputObject
      ContactUpdateOneWithoutWeChatUserInput: ContactUpdateOneWithoutWeChatUserInputInputObject
      ContactUpdateWithoutWeChatUserDataInput: ContactUpdateWithoutWeChatUserDataInputInputObject
      ContactUpsertWithoutWeChatUserInput: ContactUpsertWithoutWeChatUserInputInputObject
      WeChatUserUpsertWithWhereUniqueWithoutJoinChatRoomInput: WeChatUserUpsertWithWhereUniqueWithoutJoinChatRoomInputInputObject
      WeChatUserScalarWhereInput: WeChatUserScalarWhereInputInputObject
      WeChatUserUpdateManyWithWhereNestedInput: WeChatUserUpdateManyWithWhereNestedInputInputObject
      WeChatUserUpdateManyDataInput: WeChatUserUpdateManyDataInputInputObject
      ChatRoomUpsertWithWhereUniqueWithoutOwnerInput: ChatRoomUpsertWithWhereUniqueWithoutOwnerInputInputObject
      ChatRoomScalarWhereInput: ChatRoomScalarWhereInputInputObject
      ChatRoomUpdateManyWithWhereNestedInput: ChatRoomUpdateManyWithWhereNestedInputInputObject
      ChatRoomUpdateManyDataInput: ChatRoomUpdateManyDataInputInputObject
      WeChatUserUpsertWithoutMessageInput: WeChatUserUpsertWithoutMessageInputInputObject
      ContentUpdateOneInput: ContentUpdateOneInputInputObject
      ContentUpdateDataInput: ContentUpdateDataInputInputObject
      TextUpdateOneWithoutContentInput: TextUpdateOneWithoutContentInputInputObject
      TextUpdateWithoutContentDataInput: TextUpdateWithoutContentDataInputInputObject
      TextUpsertWithoutContentInput: TextUpsertWithoutContentInputInputObject
      ImageUpdateOneWithoutContentInput: ImageUpdateOneWithoutContentInputInputObject
      ImageUpdateWithoutContentDataInput: ImageUpdateWithoutContentDataInputInputObject
      ImageUpsertWithoutContentInput: ImageUpsertWithoutContentInputInputObject
      VoiceUpdateOneWithoutContentInput: VoiceUpdateOneWithoutContentInputInputObject
      VoiceUpdateWithoutContentDataInput: VoiceUpdateWithoutContentDataInputInputObject
      VoiceUpsertWithoutContentInput: VoiceUpsertWithoutContentInputInputObject
      VideoUpdateOneWithoutContentInput: VideoUpdateOneWithoutContentInputInputObject
      VideoUpdateWithoutContentDataInput: VideoUpdateWithoutContentDataInputInputObject
      VideoUpsertWithoutContentInput: VideoUpsertWithoutContentInputInputObject
      FileUpdateOneWithoutContentInput: FileUpdateOneWithoutContentInputInputObject
      FileUpdateWithoutContentDataInput: FileUpdateWithoutContentDataInputInputObject
      FileUpsertWithoutContentInput: FileUpsertWithoutContentInputInputObject
      AppUpdateOneWithoutContentInput: AppUpdateOneWithoutContentInputInputObject
      AppUpdateWithoutContentDataInput: AppUpdateWithoutContentDataInputInputObject
      AppUpsertWithoutContentInput: AppUpsertWithoutContentInputInputObject
      ContentUpsertNestedInput: ContentUpsertNestedInputInputObject
      MessageUpsertWithWhereUniqueWithoutChatRoomInput: MessageUpsertWithWhereUniqueWithoutChatRoomInputInputObject
      MessageScalarWhereInput: MessageScalarWhereInputInputObject
      MessageUpdateManyWithWhereNestedInput: MessageUpdateManyWithWhereNestedInputInputObject
      MessageUpdateManyDataInput: MessageUpdateManyDataInputInputObject
      ChatRoomUpsertWithWhereUniqueWithoutMemberListInput: ChatRoomUpsertWithWhereUniqueWithoutMemberListInputInputObject
      WeChatUserUpsertWithoutHaveChatRoomInput: WeChatUserUpsertWithoutHaveChatRoomInputInputObject
      ChatRoomUpsertWithoutMessageInput: ChatRoomUpsertWithoutMessageInputInputObject
      MessageUpsertWithWhereUniqueWithoutTalkerInput: MessageUpsertWithWhereUniqueWithoutTalkerInputInputObject
      WeChatUserUpsertNestedInput: WeChatUserUpsertNestedInputInputObject
      WeChatUserUpdateManyInput: WeChatUserUpdateManyInputInputObject
      WeChatUserUpdateWithWhereUniqueNestedInput: WeChatUserUpdateWithWhereUniqueNestedInputInputObject
      WeChatUserUpsertWithWhereUniqueNestedInput: WeChatUserUpsertWithWhereUniqueNestedInputInputObject
      ChatRoomUpdateManyInput: ChatRoomUpdateManyInputInputObject
      ChatRoomUpdateWithWhereUniqueNestedInput: ChatRoomUpdateWithWhereUniqueNestedInputInputObject
      ChatRoomUpdateDataInput: ChatRoomUpdateDataInputInputObject
      ChatRoomUpsertWithWhereUniqueNestedInput: ChatRoomUpsertWithWhereUniqueNestedInputInputObject
      MessageUpdateManyInput: MessageUpdateManyInputInputObject
      MessageUpdateWithWhereUniqueNestedInput: MessageUpdateWithWhereUniqueNestedInputInputObject
      MessageUpdateDataInput: MessageUpdateDataInputInputObject
      MessageUpsertWithWhereUniqueNestedInput: MessageUpsertWithWhereUniqueNestedInputInputObject
      WeChatUpsertWithWhereUniqueNestedInput: WeChatUpsertWithWhereUniqueNestedInputInputObject
      WeChatScalarWhereInput: WeChatScalarWhereInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      WeChatUpdateInput: WeChatUpdateInputInputObject
      WeChatUserUpdateInput: WeChatUserUpdateInputInputObject
      WeChatUserUpdateManyMutationInput: WeChatUserUpdateManyMutationInputInputObject
      ChatRoomUpdateInput: ChatRoomUpdateInputInputObject
      ChatRoomUpdateManyMutationInput: ChatRoomUpdateManyMutationInputInputObject
      AvatarUpdateInput: AvatarUpdateInputInputObject
      ContactCreateInput: ContactCreateInputInputObject
      WeChatUserCreateManyWithoutContactInput: WeChatUserCreateManyWithoutContactInputInputObject
      WeChatUserCreateWithoutContactInput: WeChatUserCreateWithoutContactInputInputObject
      ContactUpdateInput: ContactUpdateInputInputObject
      WeChatUserUpdateManyWithoutContactInput: WeChatUserUpdateManyWithoutContactInputInputObject
      WeChatUserUpdateWithWhereUniqueWithoutContactInput: WeChatUserUpdateWithWhereUniqueWithoutContactInputInputObject
      WeChatUserUpdateWithoutContactDataInput: WeChatUserUpdateWithoutContactDataInputInputObject
      WeChatUserUpsertWithWhereUniqueWithoutContactInput: WeChatUserUpsertWithWhereUniqueWithoutContactInputInputObject
      ContactUpdateManyMutationInput: ContactUpdateManyMutationInputInputObject
      MessageUpdateInput: MessageUpdateInputInputObject
      MessageUpdateManyMutationInput: MessageUpdateManyMutationInputInputObject
      ContentUpdateInput: ContentUpdateInputInputObject
      TextCreateInput: TextCreateInputInputObject
      ContentCreateOneWithoutTextInput: ContentCreateOneWithoutTextInputInputObject
      ContentCreateWithoutTextInput: ContentCreateWithoutTextInputInputObject
      TextUpdateInput: TextUpdateInputInputObject
      ContentUpdateOneWithoutTextInput: ContentUpdateOneWithoutTextInputInputObject
      ContentUpdateWithoutTextDataInput: ContentUpdateWithoutTextDataInputInputObject
      ContentUpsertWithoutTextInput: ContentUpsertWithoutTextInputInputObject
      TextUpdateManyMutationInput: TextUpdateManyMutationInputInputObject
      ImageCreateInput: ImageCreateInputInputObject
      ContentCreateOneWithoutImageInput: ContentCreateOneWithoutImageInputInputObject
      ContentCreateWithoutImageInput: ContentCreateWithoutImageInputInputObject
      ImageUpdateInput: ImageUpdateInputInputObject
      ContentUpdateOneWithoutImageInput: ContentUpdateOneWithoutImageInputInputObject
      ContentUpdateWithoutImageDataInput: ContentUpdateWithoutImageDataInputInputObject
      ContentUpsertWithoutImageInput: ContentUpsertWithoutImageInputInputObject
      VoiceCreateInput: VoiceCreateInputInputObject
      ContentCreateOneWithoutVoiceInput: ContentCreateOneWithoutVoiceInputInputObject
      ContentCreateWithoutVoiceInput: ContentCreateWithoutVoiceInputInputObject
      VoiceUpdateInput: VoiceUpdateInputInputObject
      ContentUpdateOneWithoutVoiceInput: ContentUpdateOneWithoutVoiceInputInputObject
      ContentUpdateWithoutVoiceDataInput: ContentUpdateWithoutVoiceDataInputInputObject
      ContentUpsertWithoutVoiceInput: ContentUpsertWithoutVoiceInputInputObject
      VoiceUpdateManyMutationInput: VoiceUpdateManyMutationInputInputObject
      VideoCreateInput: VideoCreateInputInputObject
      ContentCreateOneWithoutVideoInput: ContentCreateOneWithoutVideoInputInputObject
      ContentCreateWithoutVideoInput: ContentCreateWithoutVideoInputInputObject
      VideoUpdateInput: VideoUpdateInputInputObject
      ContentUpdateOneWithoutVideoInput: ContentUpdateOneWithoutVideoInputInputObject
      ContentUpdateWithoutVideoDataInput: ContentUpdateWithoutVideoDataInputInputObject
      ContentUpsertWithoutVideoInput: ContentUpsertWithoutVideoInputInputObject
      VideoUpdateManyMutationInput: VideoUpdateManyMutationInputInputObject
      FileCreateInput: FileCreateInputInputObject
      ContentCreateOneWithoutFileInput: ContentCreateOneWithoutFileInputInputObject
      ContentCreateWithoutFileInput: ContentCreateWithoutFileInputInputObject
      FileUpdateInput: FileUpdateInputInputObject
      ContentUpdateOneWithoutFileInput: ContentUpdateOneWithoutFileInputInputObject
      ContentUpdateWithoutFileDataInput: ContentUpdateWithoutFileDataInputInputObject
      ContentUpsertWithoutFileInput: ContentUpsertWithoutFileInputInputObject
      FileUpdateManyMutationInput: FileUpdateManyMutationInputInputObject
      AppCreateInput: AppCreateInputInputObject
      ContentCreateOneWithoutAppInput: ContentCreateOneWithoutAppInputInputObject
      ContentCreateWithoutAppInput: ContentCreateWithoutAppInputInputObject
      AppUpdateInput: AppUpdateInputInputObject
      ContentUpdateOneWithoutAppInput: ContentUpdateOneWithoutAppInputInputObject
      ContentUpdateWithoutAppDataInput: ContentUpdateWithoutAppDataInputInputObject
      ContentUpsertWithoutAppInput: ContentUpsertWithoutAppInputInputObject
      AppUpdateManyMutationInput: AppUpdateManyMutationInputInputObject
      FileIndexUpdateInput: FileIndexUpdateInputInputObject
      FileIndexUpdateManyMutationInput: FileIndexUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      WeChatSubscriptionWhereInput: WeChatSubscriptionWhereInputInputObject
      WeChatUserSubscriptionWhereInput: WeChatUserSubscriptionWhereInputInputObject
      ChatRoomSubscriptionWhereInput: ChatRoomSubscriptionWhereInputInputObject
      AvatarSubscriptionWhereInput: AvatarSubscriptionWhereInputInputObject
      ContactSubscriptionWhereInput: ContactSubscriptionWhereInputInputObject
      MessageSubscriptionWhereInput: MessageSubscriptionWhereInputInputObject
      ContentSubscriptionWhereInput: ContentSubscriptionWhereInputInputObject
      TextSubscriptionWhereInput: TextSubscriptionWhereInputInputObject
      ImageSubscriptionWhereInput: ImageSubscriptionWhereInputInputObject
      VoiceSubscriptionWhereInput: VoiceSubscriptionWhereInputInputObject
      VideoSubscriptionWhereInput: VideoSubscriptionWhereInputInputObject
      FileSubscriptionWhereInput: FileSubscriptionWhereInputInputObject
      AppSubscriptionWhereInput: AppSubscriptionWhereInputInputObject
      FileIndexSubscriptionWhereInput: FileIndexSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    WeChatOrderByInput: WeChatOrderByInputValues,
    MessageOrderByInput: MessageOrderByInputValues,
    WeChatUserOrderByInput: WeChatUserOrderByInputValues,
    ChatRoomOrderByInput: ChatRoomOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    AvatarOrderByInput: AvatarOrderByInputValues,
    ContactOrderByInput: ContactOrderByInputValues,
    ContentOrderByInput: ContentOrderByInputValues,
    TextOrderByInput: TextOrderByInputValues,
    ImageOrderByInput: ImageOrderByInputValues,
    VoiceOrderByInput: VoiceOrderByInputValues,
    VideoOrderByInput: VideoOrderByInputValues,
    FileOrderByInput: FileOrderByInputValues,
    AppOrderByInput: AppOrderByInputValues,
    FileIndexOrderByInput: FileIndexOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'weChat', args?: QueryWeChatArgs[] | false, alias?: string  } 
  | { name: 'weChats', args?: QueryWeChatsArgs[] | false, alias?: string  } 
  | { name: 'weChatsConnection', args?: QueryWeChatsConnectionArgs[] | false, alias?: string  } 
  | { name: 'weChatUser', args?: QueryWeChatUserArgs[] | false, alias?: string  } 
  | { name: 'weChatUsers', args?: QueryWeChatUsersArgs[] | false, alias?: string  } 
  | { name: 'weChatUsersConnection', args?: QueryWeChatUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'chatRoom', args?: QueryChatRoomArgs[] | false, alias?: string  } 
  | { name: 'chatRooms', args?: QueryChatRoomsArgs[] | false, alias?: string  } 
  | { name: 'chatRoomsConnection', args?: QueryChatRoomsConnectionArgs[] | false, alias?: string  } 
  | { name: 'avatar', args?: QueryAvatarArgs[] | false, alias?: string  } 
  | { name: 'avatars', args?: QueryAvatarsArgs[] | false, alias?: string  } 
  | { name: 'avatarsConnection', args?: QueryAvatarsConnectionArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: QueryContactArgs[] | false, alias?: string  } 
  | { name: 'contacts', args?: QueryContactsArgs[] | false, alias?: string  } 
  | { name: 'contactsConnection', args?: QueryContactsConnectionArgs[] | false, alias?: string  } 
  | { name: 'message', args?: QueryMessageArgs[] | false, alias?: string  } 
  | { name: 'messages', args?: QueryMessagesArgs[] | false, alias?: string  } 
  | { name: 'messagesConnection', args?: QueryMessagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'content', args?: QueryContentArgs[] | false, alias?: string  } 
  | { name: 'contents', args?: QueryContentsArgs[] | false, alias?: string  } 
  | { name: 'contentsConnection', args?: QueryContentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'text', args?: QueryTextArgs[] | false, alias?: string  } 
  | { name: 'texts', args?: QueryTextsArgs[] | false, alias?: string  } 
  | { name: 'textsConnection', args?: QueryTextsConnectionArgs[] | false, alias?: string  } 
  | { name: 'image', args?: QueryImageArgs[] | false, alias?: string  } 
  | { name: 'images', args?: QueryImagesArgs[] | false, alias?: string  } 
  | { name: 'imagesConnection', args?: QueryImagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'voice', args?: QueryVoiceArgs[] | false, alias?: string  } 
  | { name: 'voices', args?: QueryVoicesArgs[] | false, alias?: string  } 
  | { name: 'voicesConnection', args?: QueryVoicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'video', args?: QueryVideoArgs[] | false, alias?: string  } 
  | { name: 'videos', args?: QueryVideosArgs[] | false, alias?: string  } 
  | { name: 'videosConnection', args?: QueryVideosConnectionArgs[] | false, alias?: string  } 
  | { name: 'file', args?: QueryFileArgs[] | false, alias?: string  } 
  | { name: 'files', args?: QueryFilesArgs[] | false, alias?: string  } 
  | { name: 'filesConnection', args?: QueryFilesConnectionArgs[] | false, alias?: string  } 
  | { name: 'app', args?: QueryAppArgs[] | false, alias?: string  } 
  | { name: 'apps', args?: QueryAppsArgs[] | false, alias?: string  } 
  | { name: 'appsConnection', args?: QueryAppsConnectionArgs[] | false, alias?: string  } 
  | { name: 'fileIndex', args?: QueryFileIndexArgs[] | false, alias?: string  } 
  | { name: 'fileIndexes', args?: QueryFileIndexesArgs[] | false, alias?: string  } 
  | { name: 'fileIndexesConnection', args?: QueryFileIndexesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'weChat'
  | 'weChats'
  | 'weChatsConnection'
  | 'weChatUser'
  | 'weChatUsers'
  | 'weChatUsersConnection'
  | 'chatRoom'
  | 'chatRooms'
  | 'chatRoomsConnection'
  | 'avatar'
  | 'avatars'
  | 'avatarsConnection'
  | 'contact'
  | 'contacts'
  | 'contactsConnection'
  | 'message'
  | 'messages'
  | 'messagesConnection'
  | 'content'
  | 'contents'
  | 'contentsConnection'
  | 'text'
  | 'texts'
  | 'textsConnection'
  | 'image'
  | 'images'
  | 'imagesConnection'
  | 'voice'
  | 'voices'
  | 'voicesConnection'
  | 'video'
  | 'videos'
  | 'videosConnection'
  | 'file'
  | 'files'
  | 'filesConnection'
  | 'app'
  | 'apps'
  | 'appsConnection'
  | 'fileIndex'
  | 'fileIndexes'
  | 'fileIndexesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWeChatArgs =
  | 'where'
type QueryWeChatsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWeChatsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWeChatUserArgs =
  | 'where'
type QueryWeChatUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWeChatUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryChatRoomArgs =
  | 'where'
type QueryChatRoomsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryChatRoomsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAvatarArgs =
  | 'where'
type QueryAvatarsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAvatarsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactArgs =
  | 'where'
type QueryContactsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMessageArgs =
  | 'where'
type QueryMessagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMessagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContentArgs =
  | 'where'
type QueryContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTextArgs =
  | 'where'
type QueryTextsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTextsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryImageArgs =
  | 'where'
type QueryImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryImagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVoiceArgs =
  | 'where'
type QueryVoicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVoicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVideoArgs =
  | 'where'
type QueryVideosArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVideosConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFileArgs =
  | 'where'
type QueryFilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFilesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAppArgs =
  | 'where'
type QueryAppsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAppsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFileIndexArgs =
  | 'where'
type QueryFileIndexesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFileIndexesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  weChat: {
    type: 'WeChat'
    args: Record<QueryWeChatArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: WeChatWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat | null> | prisma.WeChat | null
  }
  weChats: {
    type: 'WeChat'
    args: Record<QueryWeChatsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WeChatWhereInput | null, orderBy?: prisma.WeChatOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat[]> | prisma.WeChat[]
  }
  weChatsConnection: {
    type: 'WeChatConnection'
    args: Record<QueryWeChatsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WeChatWhereInput | null, orderBy?: prisma.WeChatOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatConnection> | prisma.WeChatConnection
  }
  weChatUser: {
    type: 'WeChatUser'
    args: Record<QueryWeChatUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: WeChatUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser | null> | prisma.WeChatUser | null
  }
  weChatUsers: {
    type: 'WeChatUser'
    args: Record<QueryWeChatUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WeChatUserWhereInput | null, orderBy?: prisma.WeChatUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser[]> | prisma.WeChatUser[]
  }
  weChatUsersConnection: {
    type: 'WeChatUserConnection'
    args: Record<QueryWeChatUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WeChatUserWhereInput | null, orderBy?: prisma.WeChatUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUserConnection> | prisma.WeChatUserConnection
  }
  chatRoom: {
    type: 'ChatRoom'
    args: Record<QueryChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ChatRoomWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom | null> | prisma.ChatRoom | null
  }
  chatRooms: {
    type: 'ChatRoom'
    args: Record<QueryChatRoomsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ChatRoomWhereInput | null, orderBy?: prisma.ChatRoomOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom[]> | prisma.ChatRoom[]
  }
  chatRoomsConnection: {
    type: 'ChatRoomConnection'
    args: Record<QueryChatRoomsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ChatRoomWhereInput | null, orderBy?: prisma.ChatRoomOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoomConnection> | prisma.ChatRoomConnection
  }
  avatar: {
    type: 'Avatar'
    args: Record<QueryAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AvatarWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  avatars: {
    type: 'Avatar'
    args: Record<QueryAvatarsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AvatarWhereInput | null, orderBy?: prisma.AvatarOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar[]> | prisma.Avatar[]
  }
  avatarsConnection: {
    type: 'AvatarConnection'
    args: Record<QueryAvatarsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AvatarWhereInput | null, orderBy?: prisma.AvatarOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarConnection> | prisma.AvatarConnection
  }
  contact: {
    type: 'Contact'
    args: Record<QueryContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  contacts: {
    type: 'Contact'
    args: Record<QueryContactsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact[]> | prisma.Contact[]
  }
  contactsConnection: {
    type: 'ContactConnection'
    args: Record<QueryContactsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactConnection> | prisma.ContactConnection
  }
  message: {
    type: 'Message'
    args: Record<QueryMessageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MessageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message | null> | prisma.Message | null
  }
  messages: {
    type: 'Message'
    args: Record<QueryMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MessageWhereInput | null, orderBy?: prisma.MessageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message[]> | prisma.Message[]
  }
  messagesConnection: {
    type: 'MessageConnection'
    args: Record<QueryMessagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MessageWhereInput | null, orderBy?: prisma.MessageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MessageConnection> | prisma.MessageConnection
  }
  content: {
    type: 'Content'
    args: Record<QueryContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
  contents: {
    type: 'Content'
    args: Record<QueryContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContentWhereInput | null, orderBy?: prisma.ContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content[]> | prisma.Content[]
  }
  contentsConnection: {
    type: 'ContentConnection'
    args: Record<QueryContentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContentWhereInput | null, orderBy?: prisma.ContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContentConnection> | prisma.ContentConnection
  }
  text: {
    type: 'Text'
    args: Record<QueryTextArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TextWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text | null> | prisma.Text | null
  }
  texts: {
    type: 'Text'
    args: Record<QueryTextsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TextWhereInput | null, orderBy?: prisma.TextOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text[]> | prisma.Text[]
  }
  textsConnection: {
    type: 'TextConnection'
    args: Record<QueryTextsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TextWhereInput | null, orderBy?: prisma.TextOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TextConnection> | prisma.TextConnection
  }
  image: {
    type: 'Image'
    args: Record<QueryImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  images: {
    type: 'Image'
    args: Record<QueryImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ImageWhereInput | null, orderBy?: prisma.ImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image[]> | prisma.Image[]
  }
  imagesConnection: {
    type: 'ImageConnection'
    args: Record<QueryImagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ImageWhereInput | null, orderBy?: prisma.ImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImageConnection> | prisma.ImageConnection
  }
  voice: {
    type: 'Voice'
    args: Record<QueryVoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice | null> | prisma.Voice | null
  }
  voices: {
    type: 'Voice'
    args: Record<QueryVoicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VoiceWhereInput | null, orderBy?: prisma.VoiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice[]> | prisma.Voice[]
  }
  voicesConnection: {
    type: 'VoiceConnection'
    args: Record<QueryVoicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VoiceWhereInput | null, orderBy?: prisma.VoiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoiceConnection> | prisma.VoiceConnection
  }
  video: {
    type: 'Video'
    args: Record<QueryVideoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VideoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video | null> | prisma.Video | null
  }
  videos: {
    type: 'Video'
    args: Record<QueryVideosArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VideoWhereInput | null, orderBy?: prisma.VideoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video[]> | prisma.Video[]
  }
  videosConnection: {
    type: 'VideoConnection'
    args: Record<QueryVideosConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VideoWhereInput | null, orderBy?: prisma.VideoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VideoConnection> | prisma.VideoConnection
  }
  file: {
    type: 'File'
    args: Record<QueryFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  files: {
    type: 'File'
    args: Record<QueryFilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File[]> | prisma.File[]
  }
  filesConnection: {
    type: 'FileConnection'
    args: Record<QueryFilesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileConnection> | prisma.FileConnection
  }
  app: {
    type: 'App'
    args: Record<QueryAppArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AppWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App | null> | prisma.App | null
  }
  apps: {
    type: 'App'
    args: Record<QueryAppsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AppWhereInput | null, orderBy?: prisma.AppOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App[]> | prisma.App[]
  }
  appsConnection: {
    type: 'AppConnection'
    args: Record<QueryAppsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AppWhereInput | null, orderBy?: prisma.AppOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AppConnection> | prisma.AppConnection
  }
  fileIndex: {
    type: 'FileIndex'
    args: Record<QueryFileIndexArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FileIndexWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  fileIndexes: {
    type: 'FileIndex'
    args: Record<QueryFileIndexesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileIndexWhereInput | null, orderBy?: prisma.FileIndexOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex[]> | prisma.FileIndex[]
  }
  fileIndexesConnection: {
    type: 'FileIndexConnection'
    args: Record<QueryFileIndexesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileIndexWhereInput | null, orderBy?: prisma.FileIndexOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndexConnection> | prisma.FileIndexConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'weChat', args?: UserWeChatArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'password'
  | 'weChat'


type UserWeChatArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  weChat: {
    type: 'WeChat'
    args: Record<UserWeChatArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: WeChatWhereInput | null, orderBy?: prisma.WeChatOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat[]> | prisma.WeChat[]
  }
}
  

// Types for WeChat

type WeChatObject =
  | WeChatFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'weChatOwner', args?: [] | false, alias?: string  } 
  | { name: 'weChatUsers', args?: WeChatWeChatUsersArgs[] | false, alias?: string  } 
  | { name: 'chatRooms', args?: WeChatChatRoomsArgs[] | false, alias?: string  } 
  | { name: 'messages', args?: WeChatMessagesArgs[] | false, alias?: string  } 

type WeChatFields =
  | 'id'
  | 'weChatOwner'
  | 'weChatUsers'
  | 'chatRooms'
  | 'messages'


type WeChatWeChatUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type WeChatChatRoomsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type WeChatMessagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface WeChatFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  weChatOwner: {
    type: 'WeChatUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChat">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser> | prisma.WeChatUser
  }
  weChatUsers: {
    type: 'WeChatUser'
    args: Record<WeChatWeChatUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChat">,
      args: { where?: WeChatUserWhereInput | null, orderBy?: prisma.WeChatUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser[]> | prisma.WeChatUser[]
  }
  chatRooms: {
    type: 'ChatRoom'
    args: Record<WeChatChatRoomsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChat">,
      args: { where?: ChatRoomWhereInput | null, orderBy?: prisma.ChatRoomOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom[]> | prisma.ChatRoom[]
  }
  messages: {
    type: 'Message'
    args: Record<WeChatMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChat">,
      args: { where?: MessageWhereInput | null, orderBy?: prisma.MessageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message[]> | prisma.Message[]
  }
}
  

// Types for WeChatUser

type WeChatUserObject =
  | WeChatUserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'alias', args?: [] | false, alias?: string  } 
  | { name: 'conRemark', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: WeChatUserMessageArgs[] | false, alias?: string  } 
  | { name: 'haveChatRoom', args?: WeChatUserHaveChatRoomArgs[] | false, alias?: string  } 
  | { name: 'joinChatRoom', args?: WeChatUserJoinChatRoomArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: [] | false, alias?: string  } 

type WeChatUserFields =
  | 'id'
  | 'username'
  | 'alias'
  | 'conRemark'
  | 'nickname'
  | 'avatar'
  | 'message'
  | 'haveChatRoom'
  | 'joinChatRoom'
  | 'contact'


type WeChatUserMessageArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type WeChatUserHaveChatRoomArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type WeChatUserJoinChatRoomArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface WeChatUserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  alias: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  conRemark: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatar: {
    type: 'Avatar'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WeChatUser">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  message: {
    type: 'Message'
    args: Record<WeChatUserMessageArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUser">,
      args: { where?: MessageWhereInput | null, orderBy?: prisma.MessageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message[]> | prisma.Message[]
  }
  haveChatRoom: {
    type: 'ChatRoom'
    args: Record<WeChatUserHaveChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUser">,
      args: { where?: ChatRoomWhereInput | null, orderBy?: prisma.ChatRoomOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom[]> | prisma.ChatRoom[]
  }
  joinChatRoom: {
    type: 'ChatRoom'
    args: Record<WeChatUserJoinChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUser">,
      args: { where?: ChatRoomWhereInput | null, orderBy?: prisma.ChatRoomOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom[]> | prisma.ChatRoom[]
  }
  contact: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WeChatUser">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
}
  

// Types for Avatar

type AvatarObject =
  | AvatarFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'thumbnailImg', args?: [] | false, alias?: string  } 
  | { name: 'bigImg', args?: [] | false, alias?: string  } 

type AvatarFields =
  | 'id'
  | 'thumbnailImg'
  | 'bigImg'



  

export interface AvatarFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  thumbnailImg: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Avatar">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  bigImg: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Avatar">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
}
  

// Types for FileIndex

type FileIndexObject =
  | FileIndexFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fileName', args?: [] | false, alias?: string  } 
  | { name: 'mimetype', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type FileIndexFields =
  | 'id'
  | 'fileName'
  | 'mimetype'
  | 'size'
  | 'url'



  

export interface FileIndexFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fileName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  mimetype: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  size: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Message

type MessageObject =
  | MessageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'msgSvrId', args?: [] | false, alias?: string  } 
  | { name: 'isSend', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'talker', args?: [] | false, alias?: string  } 
  | { name: 'createTime', args?: [] | false, alias?: string  } 
  | { name: 'chatRoom', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type MessageFields =
  | 'id'
  | 'msgSvrId'
  | 'isSend'
  | 'type'
  | 'talker'
  | 'createTime'
  | 'chatRoom'
  | 'content'



  

export interface MessageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  msgSvrId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isSend: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  talker: {
    type: 'WeChatUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Message">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser> | prisma.WeChatUser
  }
  createTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  chatRoom: {
    type: 'ChatRoom'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Message">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom | null> | prisma.ChatRoom | null
  }
  content: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Message">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
}
  

// Types for ChatRoom

type ChatRoomObject =
  | ChatRoomFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 
  | { name: 'displayName', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'memberList', args?: ChatRoomMemberListArgs[] | false, alias?: string  } 
  | { name: 'modifyTime', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: ChatRoomMessageArgs[] | false, alias?: string  } 

type ChatRoomFields =
  | 'id'
  | 'username'
  | 'nickname'
  | 'displayName'
  | 'owner'
  | 'memberList'
  | 'modifyTime'
  | 'avatar'
  | 'message'


type ChatRoomMemberListArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ChatRoomMessageArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ChatRoomFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  displayName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'WeChatUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoom">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser> | prisma.WeChatUser
  }
  memberList: {
    type: 'WeChatUser'
    args: Record<ChatRoomMemberListArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoom">,
      args: { where?: WeChatUserWhereInput | null, orderBy?: prisma.WeChatUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser[]> | prisma.WeChatUser[]
  }
  modifyTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatar: {
    type: 'Avatar'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChatRoom">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  message: {
    type: 'Message'
    args: Record<ChatRoomMessageArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoom">,
      args: { where?: MessageWhereInput | null, orderBy?: prisma.MessageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message[]> | prisma.Message[]
  }
}
  

// Types for Content

type ContentObject =
  | ContentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'voice', args?: [] | false, alias?: string  } 
  | { name: 'video', args?: [] | false, alias?: string  } 
  | { name: 'file', args?: [] | false, alias?: string  } 
  | { name: 'app', args?: [] | false, alias?: string  } 

type ContentFields =
  | 'id'
  | 'text'
  | 'image'
  | 'voice'
  | 'video'
  | 'file'
  | 'app'



  

export interface ContentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'Text'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Content">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text | null> | prisma.Text | null
  }
  image: {
    type: 'Image'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Content">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  voice: {
    type: 'Voice'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Content">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice | null> | prisma.Voice | null
  }
  video: {
    type: 'Video'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Content">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video | null> | prisma.Video | null
  }
  file: {
    type: 'File'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Content">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  app: {
    type: 'App'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Content">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App | null> | prisma.App | null
  }
}
  

// Types for Text

type TextObject =
  | TextFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'textMsg', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type TextFields =
  | 'id'
  | 'textMsg'
  | 'content'



  

export interface TextFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  textMsg: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Text">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
}
  

// Types for Image

type ImageObject =
  | ImageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'thumbnailImg', args?: [] | false, alias?: string  } 
  | { name: 'bigImg', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type ImageFields =
  | 'id'
  | 'thumbnailImg'
  | 'bigImg'
  | 'content'



  

export interface ImageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  thumbnailImg: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Image">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  bigImg: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Image">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  content: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Image">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
}
  

// Types for Voice

type VoiceObject =
  | VoiceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fileName', args?: [] | false, alias?: string  } 
  | { name: 'voiceLength', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type VoiceFields =
  | 'id'
  | 'fileName'
  | 'voiceLength'
  | 'content'



  

export interface VoiceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fileName: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Voice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  voiceLength: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  content: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Voice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
}
  

// Types for Video

type VideoObject =
  | VideoFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fileName', args?: [] | false, alias?: string  } 
  | { name: 'thumbnailImg', args?: [] | false, alias?: string  } 
  | { name: 'videolength', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type VideoFields =
  | 'id'
  | 'fileName'
  | 'thumbnailImg'
  | 'videolength'
  | 'content'



  

export interface VideoFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fileName: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Video">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  thumbnailImg: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Video">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  videolength: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  content: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Video">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
}
  

// Types for File

type FileObject =
  | FileFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fileName', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type FileFields =
  | 'id'
  | 'fileName'
  | 'size'
  | 'content'



  

export interface FileFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fileName: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"File">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  size: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  content: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"File">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
}
  

// Types for App

type AppObject =
  | AppFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'xml', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type AppFields =
  | 'id'
  | 'xml'
  | 'content'



  

export interface AppFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xml: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  content: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"App">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
}
  

// Types for Contact

type ContactObject =
  | ContactFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'weChatUser', args?: ContactWeChatUserArgs[] | false, alias?: string  } 

type ContactFields =
  | 'id'
  | 'type'
  | 'weChatUser'


type ContactWeChatUserArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ContactFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  weChatUser: {
    type: 'WeChatUser'
    args: Record<ContactWeChatUserArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Contact">,
      args: { where?: WeChatUserWhereInput | null, orderBy?: prisma.WeChatUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser[]> | prisma.WeChatUser[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WeChatConnection

type WeChatConnectionObject =
  | WeChatConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type WeChatConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface WeChatConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'WeChatEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatEdge[]> | prisma.WeChatEdge[]
  }
  aggregate: {
    type: 'AggregateWeChat'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateWeChat> | prisma.AggregateWeChat
  }
}
  

// Types for WeChatEdge

type WeChatEdgeObject =
  | WeChatEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type WeChatEdgeFields =
  | 'node'
  | 'cursor'



  

export interface WeChatEdgeFieldDetails {
  node: {
    type: 'WeChat'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat> | prisma.WeChat
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateWeChat

type AggregateWeChatObject =
  | AggregateWeChatFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateWeChatFields =
  | 'count'



  

export interface AggregateWeChatFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WeChatUserConnection

type WeChatUserConnectionObject =
  | WeChatUserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type WeChatUserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface WeChatUserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'WeChatUserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUserEdge[]> | prisma.WeChatUserEdge[]
  }
  aggregate: {
    type: 'AggregateWeChatUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateWeChatUser> | prisma.AggregateWeChatUser
  }
}
  

// Types for WeChatUserEdge

type WeChatUserEdgeObject =
  | WeChatUserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type WeChatUserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface WeChatUserEdgeFieldDetails {
  node: {
    type: 'WeChatUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser> | prisma.WeChatUser
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateWeChatUser

type AggregateWeChatUserObject =
  | AggregateWeChatUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateWeChatUserFields =
  | 'count'



  

export interface AggregateWeChatUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ChatRoomConnection

type ChatRoomConnectionObject =
  | ChatRoomConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ChatRoomConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ChatRoomConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoomConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ChatRoomEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoomConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoomEdge[]> | prisma.ChatRoomEdge[]
  }
  aggregate: {
    type: 'AggregateChatRoom'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoomConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateChatRoom> | prisma.AggregateChatRoom
  }
}
  

// Types for ChatRoomEdge

type ChatRoomEdgeObject =
  | ChatRoomEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ChatRoomEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ChatRoomEdgeFieldDetails {
  node: {
    type: 'ChatRoom'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoomEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom> | prisma.ChatRoom
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateChatRoom

type AggregateChatRoomObject =
  | AggregateChatRoomFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateChatRoomFields =
  | 'count'



  

export interface AggregateChatRoomFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AvatarConnection

type AvatarConnectionObject =
  | AvatarConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AvatarConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AvatarConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AvatarEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarEdge[]> | prisma.AvatarEdge[]
  }
  aggregate: {
    type: 'AggregateAvatar'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAvatar> | prisma.AggregateAvatar
  }
}
  

// Types for AvatarEdge

type AvatarEdgeObject =
  | AvatarEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AvatarEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AvatarEdgeFieldDetails {
  node: {
    type: 'Avatar'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar> | prisma.Avatar
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAvatar

type AggregateAvatarObject =
  | AggregateAvatarFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAvatarFields =
  | 'count'



  

export interface AggregateAvatarFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ContactConnection

type ContactConnectionObject =
  | ContactConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ContactConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ContactConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ContactEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactEdge[]> | prisma.ContactEdge[]
  }
  aggregate: {
    type: 'AggregateContact'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateContact> | prisma.AggregateContact
  }
}
  

// Types for ContactEdge

type ContactEdgeObject =
  | ContactEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ContactEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ContactEdgeFieldDetails {
  node: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateContact

type AggregateContactObject =
  | AggregateContactFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateContactFields =
  | 'count'



  

export interface AggregateContactFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MessageConnection

type MessageConnectionObject =
  | MessageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MessageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MessageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MessageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MessageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MessageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MessageEdge[]> | prisma.MessageEdge[]
  }
  aggregate: {
    type: 'AggregateMessage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MessageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMessage> | prisma.AggregateMessage
  }
}
  

// Types for MessageEdge

type MessageEdgeObject =
  | MessageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MessageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MessageEdgeFieldDetails {
  node: {
    type: 'Message'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MessageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message> | prisma.Message
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMessage

type AggregateMessageObject =
  | AggregateMessageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMessageFields =
  | 'count'



  

export interface AggregateMessageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ContentConnection

type ContentConnectionObject =
  | ContentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ContentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ContentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ContentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContentEdge[]> | prisma.ContentEdge[]
  }
  aggregate: {
    type: 'AggregateContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateContent> | prisma.AggregateContent
  }
}
  

// Types for ContentEdge

type ContentEdgeObject =
  | ContentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ContentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ContentEdgeFieldDetails {
  node: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content> | prisma.Content
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateContent

type AggregateContentObject =
  | AggregateContentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateContentFields =
  | 'count'



  

export interface AggregateContentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TextConnection

type TextConnectionObject =
  | TextConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TextConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TextConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TextConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TextEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TextConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TextEdge[]> | prisma.TextEdge[]
  }
  aggregate: {
    type: 'AggregateText'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TextConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateText> | prisma.AggregateText
  }
}
  

// Types for TextEdge

type TextEdgeObject =
  | TextEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TextEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TextEdgeFieldDetails {
  node: {
    type: 'Text'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TextEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text> | prisma.Text
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateText

type AggregateTextObject =
  | AggregateTextFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTextFields =
  | 'count'



  

export interface AggregateTextFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ImageConnection

type ImageConnectionObject =
  | ImageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ImageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ImageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ImageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImageEdge[]> | prisma.ImageEdge[]
  }
  aggregate: {
    type: 'AggregateImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateImage> | prisma.AggregateImage
  }
}
  

// Types for ImageEdge

type ImageEdgeObject =
  | ImageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ImageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ImageEdgeFieldDetails {
  node: {
    type: 'Image'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateImage

type AggregateImageObject =
  | AggregateImageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateImageFields =
  | 'count'



  

export interface AggregateImageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VoiceConnection

type VoiceConnectionObject =
  | VoiceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VoiceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VoiceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VoiceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoiceEdge[]> | prisma.VoiceEdge[]
  }
  aggregate: {
    type: 'AggregateVoice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVoice> | prisma.AggregateVoice
  }
}
  

// Types for VoiceEdge

type VoiceEdgeObject =
  | VoiceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VoiceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VoiceEdgeFieldDetails {
  node: {
    type: 'Voice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoiceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice> | prisma.Voice
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVoice

type AggregateVoiceObject =
  | AggregateVoiceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVoiceFields =
  | 'count'



  

export interface AggregateVoiceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VideoConnection

type VideoConnectionObject =
  | VideoConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VideoConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VideoConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VideoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VideoEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VideoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VideoEdge[]> | prisma.VideoEdge[]
  }
  aggregate: {
    type: 'AggregateVideo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VideoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVideo> | prisma.AggregateVideo
  }
}
  

// Types for VideoEdge

type VideoEdgeObject =
  | VideoEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VideoEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VideoEdgeFieldDetails {
  node: {
    type: 'Video'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VideoEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video> | prisma.Video
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVideo

type AggregateVideoObject =
  | AggregateVideoFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVideoFields =
  | 'count'



  

export interface AggregateVideoFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FileConnection

type FileConnectionObject =
  | FileConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FileConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FileConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FileEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileEdge[]> | prisma.FileEdge[]
  }
  aggregate: {
    type: 'AggregateFile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFile> | prisma.AggregateFile
  }
}
  

// Types for FileEdge

type FileEdgeObject =
  | FileEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FileEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FileEdgeFieldDetails {
  node: {
    type: 'File'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFile

type AggregateFileObject =
  | AggregateFileFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFileFields =
  | 'count'



  

export interface AggregateFileFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AppConnection

type AppConnectionObject =
  | AppConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AppConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AppConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AppConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AppEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AppConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AppEdge[]> | prisma.AppEdge[]
  }
  aggregate: {
    type: 'AggregateApp'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AppConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateApp> | prisma.AggregateApp
  }
}
  

// Types for AppEdge

type AppEdgeObject =
  | AppEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AppEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AppEdgeFieldDetails {
  node: {
    type: 'App'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AppEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App> | prisma.App
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateApp

type AggregateAppObject =
  | AggregateAppFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAppFields =
  | 'count'



  

export interface AggregateAppFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FileIndexConnection

type FileIndexConnectionObject =
  | FileIndexConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FileIndexConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FileIndexConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileIndexConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FileIndexEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FileIndexConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndexEdge[]> | prisma.FileIndexEdge[]
  }
  aggregate: {
    type: 'AggregateFileIndex'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileIndexConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFileIndex> | prisma.AggregateFileIndex
  }
}
  

// Types for FileIndexEdge

type FileIndexEdgeObject =
  | FileIndexEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FileIndexEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FileIndexEdgeFieldDetails {
  node: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileIndexEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex> | prisma.FileIndex
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFileIndex

type AggregateFileIndexObject =
  | AggregateFileIndexFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFileIndexFields =
  | 'count'



  

export interface AggregateFileIndexFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createWeChat', args?: MutationCreateWeChatArgs[] | false, alias?: string  } 
  | { name: 'updateWeChat', args?: MutationUpdateWeChatArgs[] | false, alias?: string  } 
  | { name: 'upsertWeChat', args?: MutationUpsertWeChatArgs[] | false, alias?: string  } 
  | { name: 'deleteWeChat', args?: MutationDeleteWeChatArgs[] | false, alias?: string  } 
  | { name: 'deleteManyWeChats', args?: MutationDeleteManyWeChatsArgs[] | false, alias?: string  } 
  | { name: 'createWeChatUser', args?: MutationCreateWeChatUserArgs[] | false, alias?: string  } 
  | { name: 'updateWeChatUser', args?: MutationUpdateWeChatUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyWeChatUsers', args?: MutationUpdateManyWeChatUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertWeChatUser', args?: MutationUpsertWeChatUserArgs[] | false, alias?: string  } 
  | { name: 'deleteWeChatUser', args?: MutationDeleteWeChatUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyWeChatUsers', args?: MutationDeleteManyWeChatUsersArgs[] | false, alias?: string  } 
  | { name: 'createChatRoom', args?: MutationCreateChatRoomArgs[] | false, alias?: string  } 
  | { name: 'updateChatRoom', args?: MutationUpdateChatRoomArgs[] | false, alias?: string  } 
  | { name: 'updateManyChatRooms', args?: MutationUpdateManyChatRoomsArgs[] | false, alias?: string  } 
  | { name: 'upsertChatRoom', args?: MutationUpsertChatRoomArgs[] | false, alias?: string  } 
  | { name: 'deleteChatRoom', args?: MutationDeleteChatRoomArgs[] | false, alias?: string  } 
  | { name: 'deleteManyChatRooms', args?: MutationDeleteManyChatRoomsArgs[] | false, alias?: string  } 
  | { name: 'createAvatar', args?: MutationCreateAvatarArgs[] | false, alias?: string  } 
  | { name: 'updateAvatar', args?: MutationUpdateAvatarArgs[] | false, alias?: string  } 
  | { name: 'upsertAvatar', args?: MutationUpsertAvatarArgs[] | false, alias?: string  } 
  | { name: 'deleteAvatar', args?: MutationDeleteAvatarArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAvatars', args?: MutationDeleteManyAvatarsArgs[] | false, alias?: string  } 
  | { name: 'createContact', args?: MutationCreateContactArgs[] | false, alias?: string  } 
  | { name: 'updateContact', args?: MutationUpdateContactArgs[] | false, alias?: string  } 
  | { name: 'updateManyContacts', args?: MutationUpdateManyContactsArgs[] | false, alias?: string  } 
  | { name: 'upsertContact', args?: MutationUpsertContactArgs[] | false, alias?: string  } 
  | { name: 'deleteContact', args?: MutationDeleteContactArgs[] | false, alias?: string  } 
  | { name: 'deleteManyContacts', args?: MutationDeleteManyContactsArgs[] | false, alias?: string  } 
  | { name: 'createMessage', args?: MutationCreateMessageArgs[] | false, alias?: string  } 
  | { name: 'updateMessage', args?: MutationUpdateMessageArgs[] | false, alias?: string  } 
  | { name: 'updateManyMessages', args?: MutationUpdateManyMessagesArgs[] | false, alias?: string  } 
  | { name: 'upsertMessage', args?: MutationUpsertMessageArgs[] | false, alias?: string  } 
  | { name: 'deleteMessage', args?: MutationDeleteMessageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMessages', args?: MutationDeleteManyMessagesArgs[] | false, alias?: string  } 
  | { name: 'createContent', args?: MutationCreateContentArgs[] | false, alias?: string  } 
  | { name: 'updateContent', args?: MutationUpdateContentArgs[] | false, alias?: string  } 
  | { name: 'upsertContent', args?: MutationUpsertContentArgs[] | false, alias?: string  } 
  | { name: 'deleteContent', args?: MutationDeleteContentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyContents', args?: MutationDeleteManyContentsArgs[] | false, alias?: string  } 
  | { name: 'createText', args?: MutationCreateTextArgs[] | false, alias?: string  } 
  | { name: 'updateText', args?: MutationUpdateTextArgs[] | false, alias?: string  } 
  | { name: 'updateManyTexts', args?: MutationUpdateManyTextsArgs[] | false, alias?: string  } 
  | { name: 'upsertText', args?: MutationUpsertTextArgs[] | false, alias?: string  } 
  | { name: 'deleteText', args?: MutationDeleteTextArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTexts', args?: MutationDeleteManyTextsArgs[] | false, alias?: string  } 
  | { name: 'createImage', args?: MutationCreateImageArgs[] | false, alias?: string  } 
  | { name: 'updateImage', args?: MutationUpdateImageArgs[] | false, alias?: string  } 
  | { name: 'upsertImage', args?: MutationUpsertImageArgs[] | false, alias?: string  } 
  | { name: 'deleteImage', args?: MutationDeleteImageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyImages', args?: MutationDeleteManyImagesArgs[] | false, alias?: string  } 
  | { name: 'createVoice', args?: MutationCreateVoiceArgs[] | false, alias?: string  } 
  | { name: 'updateVoice', args?: MutationUpdateVoiceArgs[] | false, alias?: string  } 
  | { name: 'updateManyVoices', args?: MutationUpdateManyVoicesArgs[] | false, alias?: string  } 
  | { name: 'upsertVoice', args?: MutationUpsertVoiceArgs[] | false, alias?: string  } 
  | { name: 'deleteVoice', args?: MutationDeleteVoiceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVoices', args?: MutationDeleteManyVoicesArgs[] | false, alias?: string  } 
  | { name: 'createVideo', args?: MutationCreateVideoArgs[] | false, alias?: string  } 
  | { name: 'updateVideo', args?: MutationUpdateVideoArgs[] | false, alias?: string  } 
  | { name: 'updateManyVideos', args?: MutationUpdateManyVideosArgs[] | false, alias?: string  } 
  | { name: 'upsertVideo', args?: MutationUpsertVideoArgs[] | false, alias?: string  } 
  | { name: 'deleteVideo', args?: MutationDeleteVideoArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVideos', args?: MutationDeleteManyVideosArgs[] | false, alias?: string  } 
  | { name: 'createFile', args?: MutationCreateFileArgs[] | false, alias?: string  } 
  | { name: 'updateFile', args?: MutationUpdateFileArgs[] | false, alias?: string  } 
  | { name: 'updateManyFiles', args?: MutationUpdateManyFilesArgs[] | false, alias?: string  } 
  | { name: 'upsertFile', args?: MutationUpsertFileArgs[] | false, alias?: string  } 
  | { name: 'deleteFile', args?: MutationDeleteFileArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFiles', args?: MutationDeleteManyFilesArgs[] | false, alias?: string  } 
  | { name: 'createApp', args?: MutationCreateAppArgs[] | false, alias?: string  } 
  | { name: 'updateApp', args?: MutationUpdateAppArgs[] | false, alias?: string  } 
  | { name: 'updateManyApps', args?: MutationUpdateManyAppsArgs[] | false, alias?: string  } 
  | { name: 'upsertApp', args?: MutationUpsertAppArgs[] | false, alias?: string  } 
  | { name: 'deleteApp', args?: MutationDeleteAppArgs[] | false, alias?: string  } 
  | { name: 'deleteManyApps', args?: MutationDeleteManyAppsArgs[] | false, alias?: string  } 
  | { name: 'createFileIndex', args?: MutationCreateFileIndexArgs[] | false, alias?: string  } 
  | { name: 'updateFileIndex', args?: MutationUpdateFileIndexArgs[] | false, alias?: string  } 
  | { name: 'updateManyFileIndexes', args?: MutationUpdateManyFileIndexesArgs[] | false, alias?: string  } 
  | { name: 'upsertFileIndex', args?: MutationUpsertFileIndexArgs[] | false, alias?: string  } 
  | { name: 'deleteFileIndex', args?: MutationDeleteFileIndexArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFileIndexes', args?: MutationDeleteManyFileIndexesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createWeChat'
  | 'updateWeChat'
  | 'upsertWeChat'
  | 'deleteWeChat'
  | 'deleteManyWeChats'
  | 'createWeChatUser'
  | 'updateWeChatUser'
  | 'updateManyWeChatUsers'
  | 'upsertWeChatUser'
  | 'deleteWeChatUser'
  | 'deleteManyWeChatUsers'
  | 'createChatRoom'
  | 'updateChatRoom'
  | 'updateManyChatRooms'
  | 'upsertChatRoom'
  | 'deleteChatRoom'
  | 'deleteManyChatRooms'
  | 'createAvatar'
  | 'updateAvatar'
  | 'upsertAvatar'
  | 'deleteAvatar'
  | 'deleteManyAvatars'
  | 'createContact'
  | 'updateContact'
  | 'updateManyContacts'
  | 'upsertContact'
  | 'deleteContact'
  | 'deleteManyContacts'
  | 'createMessage'
  | 'updateMessage'
  | 'updateManyMessages'
  | 'upsertMessage'
  | 'deleteMessage'
  | 'deleteManyMessages'
  | 'createContent'
  | 'updateContent'
  | 'upsertContent'
  | 'deleteContent'
  | 'deleteManyContents'
  | 'createText'
  | 'updateText'
  | 'updateManyTexts'
  | 'upsertText'
  | 'deleteText'
  | 'deleteManyTexts'
  | 'createImage'
  | 'updateImage'
  | 'upsertImage'
  | 'deleteImage'
  | 'deleteManyImages'
  | 'createVoice'
  | 'updateVoice'
  | 'updateManyVoices'
  | 'upsertVoice'
  | 'deleteVoice'
  | 'deleteManyVoices'
  | 'createVideo'
  | 'updateVideo'
  | 'updateManyVideos'
  | 'upsertVideo'
  | 'deleteVideo'
  | 'deleteManyVideos'
  | 'createFile'
  | 'updateFile'
  | 'updateManyFiles'
  | 'upsertFile'
  | 'deleteFile'
  | 'deleteManyFiles'
  | 'createApp'
  | 'updateApp'
  | 'updateManyApps'
  | 'upsertApp'
  | 'deleteApp'
  | 'deleteManyApps'
  | 'createFileIndex'
  | 'updateFileIndex'
  | 'updateManyFileIndexes'
  | 'upsertFileIndex'
  | 'deleteFileIndex'
  | 'deleteManyFileIndexes'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateWeChatArgs =
  | 'data'
type MutationUpdateWeChatArgs =
  | 'data'
  | 'where'
type MutationUpsertWeChatArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteWeChatArgs =
  | 'where'
type MutationDeleteManyWeChatsArgs =
  | 'where'
type MutationCreateWeChatUserArgs =
  | 'data'
type MutationUpdateWeChatUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyWeChatUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertWeChatUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteWeChatUserArgs =
  | 'where'
type MutationDeleteManyWeChatUsersArgs =
  | 'where'
type MutationCreateChatRoomArgs =
  | 'data'
type MutationUpdateChatRoomArgs =
  | 'data'
  | 'where'
type MutationUpdateManyChatRoomsArgs =
  | 'data'
  | 'where'
type MutationUpsertChatRoomArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteChatRoomArgs =
  | 'where'
type MutationDeleteManyChatRoomsArgs =
  | 'where'
type MutationCreateAvatarArgs =
  | 'data'
type MutationUpdateAvatarArgs =
  | 'data'
  | 'where'
type MutationUpsertAvatarArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAvatarArgs =
  | 'where'
type MutationDeleteManyAvatarsArgs =
  | 'where'
type MutationCreateContactArgs =
  | 'data'
type MutationUpdateContactArgs =
  | 'data'
  | 'where'
type MutationUpdateManyContactsArgs =
  | 'data'
  | 'where'
type MutationUpsertContactArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteContactArgs =
  | 'where'
type MutationDeleteManyContactsArgs =
  | 'where'
type MutationCreateMessageArgs =
  | 'data'
type MutationUpdateMessageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMessagesArgs =
  | 'data'
  | 'where'
type MutationUpsertMessageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMessageArgs =
  | 'where'
type MutationDeleteManyMessagesArgs =
  | 'where'
type MutationCreateContentArgs =
  | 'data'
type MutationUpdateContentArgs =
  | 'data'
  | 'where'
type MutationUpsertContentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteContentArgs =
  | 'where'
type MutationDeleteManyContentsArgs =
  | 'where'
type MutationCreateTextArgs =
  | 'data'
type MutationUpdateTextArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTextsArgs =
  | 'data'
  | 'where'
type MutationUpsertTextArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTextArgs =
  | 'where'
type MutationDeleteManyTextsArgs =
  | 'where'
type MutationCreateImageArgs =
  | 'data'
type MutationUpdateImageArgs =
  | 'data'
  | 'where'
type MutationUpsertImageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteImageArgs =
  | 'where'
type MutationDeleteManyImagesArgs =
  | 'where'
type MutationCreateVoiceArgs =
  | 'data'
type MutationUpdateVoiceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyVoicesArgs =
  | 'data'
  | 'where'
type MutationUpsertVoiceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVoiceArgs =
  | 'where'
type MutationDeleteManyVoicesArgs =
  | 'where'
type MutationCreateVideoArgs =
  | 'data'
type MutationUpdateVideoArgs =
  | 'data'
  | 'where'
type MutationUpdateManyVideosArgs =
  | 'data'
  | 'where'
type MutationUpsertVideoArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVideoArgs =
  | 'where'
type MutationDeleteManyVideosArgs =
  | 'where'
type MutationCreateFileArgs =
  | 'data'
type MutationUpdateFileArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFilesArgs =
  | 'data'
  | 'where'
type MutationUpsertFileArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFileArgs =
  | 'where'
type MutationDeleteManyFilesArgs =
  | 'where'
type MutationCreateAppArgs =
  | 'data'
type MutationUpdateAppArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAppsArgs =
  | 'data'
  | 'where'
type MutationUpsertAppArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAppArgs =
  | 'where'
type MutationDeleteManyAppsArgs =
  | 'where'
type MutationCreateFileIndexArgs =
  | 'data'
type MutationUpdateFileIndexArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFileIndexesArgs =
  | 'data'
  | 'where'
type MutationUpsertFileIndexArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFileIndexArgs =
  | 'where'
type MutationDeleteManyFileIndexesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createWeChat: {
    type: 'WeChat'
    args: Record<MutationCreateWeChatArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WeChatCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat> | prisma.WeChat
  }
  updateWeChat: {
    type: 'WeChat'
    args: Record<MutationUpdateWeChatArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WeChatUpdateInput, where: WeChatWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat | null> | prisma.WeChat | null
  }
  upsertWeChat: {
    type: 'WeChat'
    args: Record<MutationUpsertWeChatArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WeChatWhereUniqueInput, create: WeChatCreateInput, update: WeChatUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat> | prisma.WeChat
  }
  deleteWeChat: {
    type: 'WeChat'
    args: Record<MutationDeleteWeChatArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WeChatWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat | null> | prisma.WeChat | null
  }
  deleteManyWeChats: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyWeChatsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: WeChatWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createWeChatUser: {
    type: 'WeChatUser'
    args: Record<MutationCreateWeChatUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WeChatUserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser> | prisma.WeChatUser
  }
  updateWeChatUser: {
    type: 'WeChatUser'
    args: Record<MutationUpdateWeChatUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WeChatUserUpdateInput, where: WeChatUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser | null> | prisma.WeChatUser | null
  }
  updateManyWeChatUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyWeChatUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WeChatUserUpdateManyMutationInput, where?: WeChatUserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertWeChatUser: {
    type: 'WeChatUser'
    args: Record<MutationUpsertWeChatUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WeChatUserWhereUniqueInput, create: WeChatUserCreateInput, update: WeChatUserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser> | prisma.WeChatUser
  }
  deleteWeChatUser: {
    type: 'WeChatUser'
    args: Record<MutationDeleteWeChatUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WeChatUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser | null> | prisma.WeChatUser | null
  }
  deleteManyWeChatUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyWeChatUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: WeChatUserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createChatRoom: {
    type: 'ChatRoom'
    args: Record<MutationCreateChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ChatRoomCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom> | prisma.ChatRoom
  }
  updateChatRoom: {
    type: 'ChatRoom'
    args: Record<MutationUpdateChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ChatRoomUpdateInput, where: ChatRoomWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom | null> | prisma.ChatRoom | null
  }
  updateManyChatRooms: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyChatRoomsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ChatRoomUpdateManyMutationInput, where?: ChatRoomWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertChatRoom: {
    type: 'ChatRoom'
    args: Record<MutationUpsertChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ChatRoomWhereUniqueInput, create: ChatRoomCreateInput, update: ChatRoomUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom> | prisma.ChatRoom
  }
  deleteChatRoom: {
    type: 'ChatRoom'
    args: Record<MutationDeleteChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ChatRoomWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom | null> | prisma.ChatRoom | null
  }
  deleteManyChatRooms: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyChatRoomsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ChatRoomWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAvatar: {
    type: 'Avatar'
    args: Record<MutationCreateAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AvatarCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar> | prisma.Avatar
  }
  updateAvatar: {
    type: 'Avatar'
    args: Record<MutationUpdateAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AvatarUpdateInput, where: AvatarWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  upsertAvatar: {
    type: 'Avatar'
    args: Record<MutationUpsertAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AvatarWhereUniqueInput, create: AvatarCreateInput, update: AvatarUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar> | prisma.Avatar
  }
  deleteAvatar: {
    type: 'Avatar'
    args: Record<MutationDeleteAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AvatarWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  deleteManyAvatars: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAvatarsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AvatarWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createContact: {
    type: 'Contact'
    args: Record<MutationCreateContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  updateContact: {
    type: 'Contact'
    args: Record<MutationUpdateContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactUpdateInput, where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  updateManyContacts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyContactsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactUpdateManyMutationInput, where?: ContactWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertContact: {
    type: 'Contact'
    args: Record<MutationUpsertContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactWhereUniqueInput, create: ContactCreateInput, update: ContactUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  deleteContact: {
    type: 'Contact'
    args: Record<MutationDeleteContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  deleteManyContacts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyContactsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ContactWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMessage: {
    type: 'Message'
    args: Record<MutationCreateMessageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MessageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message> | prisma.Message
  }
  updateMessage: {
    type: 'Message'
    args: Record<MutationUpdateMessageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MessageUpdateInput, where: MessageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message | null> | prisma.Message | null
  }
  updateManyMessages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MessageUpdateManyMutationInput, where?: MessageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMessage: {
    type: 'Message'
    args: Record<MutationUpsertMessageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MessageWhereUniqueInput, create: MessageCreateInput, update: MessageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message> | prisma.Message
  }
  deleteMessage: {
    type: 'Message'
    args: Record<MutationDeleteMessageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MessageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message | null> | prisma.Message | null
  }
  deleteManyMessages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMessagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MessageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createContent: {
    type: 'Content'
    args: Record<MutationCreateContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content> | prisma.Content
  }
  updateContent: {
    type: 'Content'
    args: Record<MutationUpdateContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContentUpdateInput, where: ContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
  upsertContent: {
    type: 'Content'
    args: Record<MutationUpsertContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContentWhereUniqueInput, create: ContentCreateInput, update: ContentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content> | prisma.Content
  }
  deleteContent: {
    type: 'Content'
    args: Record<MutationDeleteContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
  deleteManyContents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createText: {
    type: 'Text'
    args: Record<MutationCreateTextArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TextCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text> | prisma.Text
  }
  updateText: {
    type: 'Text'
    args: Record<MutationUpdateTextArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TextUpdateInput, where: TextWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text | null> | prisma.Text | null
  }
  updateManyTexts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTextsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TextUpdateManyMutationInput, where?: TextWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertText: {
    type: 'Text'
    args: Record<MutationUpsertTextArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TextWhereUniqueInput, create: TextCreateInput, update: TextUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text> | prisma.Text
  }
  deleteText: {
    type: 'Text'
    args: Record<MutationDeleteTextArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TextWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text | null> | prisma.Text | null
  }
  deleteManyTexts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTextsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TextWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createImage: {
    type: 'Image'
    args: Record<MutationCreateImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  updateImage: {
    type: 'Image'
    args: Record<MutationUpdateImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImageUpdateInput, where: ImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  upsertImage: {
    type: 'Image'
    args: Record<MutationUpsertImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ImageWhereUniqueInput, create: ImageCreateInput, update: ImageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  deleteImage: {
    type: 'Image'
    args: Record<MutationDeleteImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  deleteManyImages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVoice: {
    type: 'Voice'
    args: Record<MutationCreateVoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VoiceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice> | prisma.Voice
  }
  updateVoice: {
    type: 'Voice'
    args: Record<MutationUpdateVoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VoiceUpdateInput, where: VoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice | null> | prisma.Voice | null
  }
  updateManyVoices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyVoicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VoiceUpdateManyMutationInput, where?: VoiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertVoice: {
    type: 'Voice'
    args: Record<MutationUpsertVoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VoiceWhereUniqueInput, create: VoiceCreateInput, update: VoiceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice> | prisma.Voice
  }
  deleteVoice: {
    type: 'Voice'
    args: Record<MutationDeleteVoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice | null> | prisma.Voice | null
  }
  deleteManyVoices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVoicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VoiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVideo: {
    type: 'Video'
    args: Record<MutationCreateVideoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VideoCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video> | prisma.Video
  }
  updateVideo: {
    type: 'Video'
    args: Record<MutationUpdateVideoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VideoUpdateInput, where: VideoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video | null> | prisma.Video | null
  }
  updateManyVideos: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyVideosArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VideoUpdateManyMutationInput, where?: VideoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertVideo: {
    type: 'Video'
    args: Record<MutationUpsertVideoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VideoWhereUniqueInput, create: VideoCreateInput, update: VideoUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video> | prisma.Video
  }
  deleteVideo: {
    type: 'Video'
    args: Record<MutationDeleteVideoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VideoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video | null> | prisma.Video | null
  }
  deleteManyVideos: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVideosArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VideoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFile: {
    type: 'File'
    args: Record<MutationCreateFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  updateFile: {
    type: 'File'
    args: Record<MutationUpdateFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileUpdateInput, where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  updateManyFiles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileUpdateManyMutationInput, where?: FileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFile: {
    type: 'File'
    args: Record<MutationUpsertFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileWhereUniqueInput, create: FileCreateInput, update: FileUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  deleteFile: {
    type: 'File'
    args: Record<MutationDeleteFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  deleteManyFiles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createApp: {
    type: 'App'
    args: Record<MutationCreateAppArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AppCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App> | prisma.App
  }
  updateApp: {
    type: 'App'
    args: Record<MutationUpdateAppArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AppUpdateInput, where: AppWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App | null> | prisma.App | null
  }
  updateManyApps: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAppsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AppUpdateManyMutationInput, where?: AppWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertApp: {
    type: 'App'
    args: Record<MutationUpsertAppArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AppWhereUniqueInput, create: AppCreateInput, update: AppUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App> | prisma.App
  }
  deleteApp: {
    type: 'App'
    args: Record<MutationDeleteAppArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AppWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App | null> | prisma.App | null
  }
  deleteManyApps: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAppsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AppWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFileIndex: {
    type: 'FileIndex'
    args: Record<MutationCreateFileIndexArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileIndexCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex> | prisma.FileIndex
  }
  updateFileIndex: {
    type: 'FileIndex'
    args: Record<MutationUpdateFileIndexArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileIndexUpdateInput, where: FileIndexWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  updateManyFileIndexes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFileIndexesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileIndexUpdateManyMutationInput, where?: FileIndexWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFileIndex: {
    type: 'FileIndex'
    args: Record<MutationUpsertFileIndexArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileIndexWhereUniqueInput, create: FileIndexCreateInput, update: FileIndexUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex> | prisma.FileIndex
  }
  deleteFileIndex: {
    type: 'FileIndex'
    args: Record<MutationDeleteFileIndexArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileIndexWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  deleteManyFileIndexes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFileIndexesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FileIndexWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'weChat', args?: SubscriptionWeChatArgs[] | false, alias?: string  } 
  | { name: 'weChatUser', args?: SubscriptionWeChatUserArgs[] | false, alias?: string  } 
  | { name: 'chatRoom', args?: SubscriptionChatRoomArgs[] | false, alias?: string  } 
  | { name: 'avatar', args?: SubscriptionAvatarArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: SubscriptionContactArgs[] | false, alias?: string  } 
  | { name: 'message', args?: SubscriptionMessageArgs[] | false, alias?: string  } 
  | { name: 'content', args?: SubscriptionContentArgs[] | false, alias?: string  } 
  | { name: 'text', args?: SubscriptionTextArgs[] | false, alias?: string  } 
  | { name: 'image', args?: SubscriptionImageArgs[] | false, alias?: string  } 
  | { name: 'voice', args?: SubscriptionVoiceArgs[] | false, alias?: string  } 
  | { name: 'video', args?: SubscriptionVideoArgs[] | false, alias?: string  } 
  | { name: 'file', args?: SubscriptionFileArgs[] | false, alias?: string  } 
  | { name: 'app', args?: SubscriptionAppArgs[] | false, alias?: string  } 
  | { name: 'fileIndex', args?: SubscriptionFileIndexArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'weChat'
  | 'weChatUser'
  | 'chatRoom'
  | 'avatar'
  | 'contact'
  | 'message'
  | 'content'
  | 'text'
  | 'image'
  | 'voice'
  | 'video'
  | 'file'
  | 'app'
  | 'fileIndex'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionWeChatArgs =
  | 'where'
type SubscriptionWeChatUserArgs =
  | 'where'
type SubscriptionChatRoomArgs =
  | 'where'
type SubscriptionAvatarArgs =
  | 'where'
type SubscriptionContactArgs =
  | 'where'
type SubscriptionMessageArgs =
  | 'where'
type SubscriptionContentArgs =
  | 'where'
type SubscriptionTextArgs =
  | 'where'
type SubscriptionImageArgs =
  | 'where'
type SubscriptionVoiceArgs =
  | 'where'
type SubscriptionVideoArgs =
  | 'where'
type SubscriptionFileArgs =
  | 'where'
type SubscriptionAppArgs =
  | 'where'
type SubscriptionFileIndexArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  weChat: {
    type: 'WeChatSubscriptionPayload'
    args: Record<SubscriptionWeChatArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: WeChatSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatSubscriptionPayload | null> | prisma.WeChatSubscriptionPayload | null
  }
  weChatUser: {
    type: 'WeChatUserSubscriptionPayload'
    args: Record<SubscriptionWeChatUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: WeChatUserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUserSubscriptionPayload | null> | prisma.WeChatUserSubscriptionPayload | null
  }
  chatRoom: {
    type: 'ChatRoomSubscriptionPayload'
    args: Record<SubscriptionChatRoomArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ChatRoomSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoomSubscriptionPayload | null> | prisma.ChatRoomSubscriptionPayload | null
  }
  avatar: {
    type: 'AvatarSubscriptionPayload'
    args: Record<SubscriptionAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AvatarSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarSubscriptionPayload | null> | prisma.AvatarSubscriptionPayload | null
  }
  contact: {
    type: 'ContactSubscriptionPayload'
    args: Record<SubscriptionContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ContactSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactSubscriptionPayload | null> | prisma.ContactSubscriptionPayload | null
  }
  message: {
    type: 'MessageSubscriptionPayload'
    args: Record<SubscriptionMessageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MessageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MessageSubscriptionPayload | null> | prisma.MessageSubscriptionPayload | null
  }
  content: {
    type: 'ContentSubscriptionPayload'
    args: Record<SubscriptionContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ContentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContentSubscriptionPayload | null> | prisma.ContentSubscriptionPayload | null
  }
  text: {
    type: 'TextSubscriptionPayload'
    args: Record<SubscriptionTextArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TextSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TextSubscriptionPayload | null> | prisma.TextSubscriptionPayload | null
  }
  image: {
    type: 'ImageSubscriptionPayload'
    args: Record<SubscriptionImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ImageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImageSubscriptionPayload | null> | prisma.ImageSubscriptionPayload | null
  }
  voice: {
    type: 'VoiceSubscriptionPayload'
    args: Record<SubscriptionVoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VoiceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoiceSubscriptionPayload | null> | prisma.VoiceSubscriptionPayload | null
  }
  video: {
    type: 'VideoSubscriptionPayload'
    args: Record<SubscriptionVideoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VideoSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VideoSubscriptionPayload | null> | prisma.VideoSubscriptionPayload | null
  }
  file: {
    type: 'FileSubscriptionPayload'
    args: Record<SubscriptionFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FileSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileSubscriptionPayload | null> | prisma.FileSubscriptionPayload | null
  }
  app: {
    type: 'AppSubscriptionPayload'
    args: Record<SubscriptionAppArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AppSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AppSubscriptionPayload | null> | prisma.AppSubscriptionPayload | null
  }
  fileIndex: {
    type: 'FileIndexSubscriptionPayload'
    args: Record<SubscriptionFileIndexArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FileIndexSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndexSubscriptionPayload | null> | prisma.FileIndexSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'
  | 'password'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WeChatSubscriptionPayload

type WeChatSubscriptionPayloadObject =
  | WeChatSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type WeChatSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface WeChatSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'WeChat'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WeChatSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChat | null> | prisma.WeChat | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'WeChatPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WeChatSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatPreviousValues | null> | prisma.WeChatPreviousValues | null
  }
}
  

// Types for WeChatPreviousValues

type WeChatPreviousValuesObject =
  | WeChatPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type WeChatPreviousValuesFields =
  | 'id'



  

export interface WeChatPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WeChatUserSubscriptionPayload

type WeChatUserSubscriptionPayloadObject =
  | WeChatUserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type WeChatUserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface WeChatUserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WeChatUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'WeChatUser'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WeChatUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUser | null> | prisma.WeChatUser | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'WeChatUserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WeChatUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WeChatUserPreviousValues | null> | prisma.WeChatUserPreviousValues | null
  }
}
  

// Types for WeChatUserPreviousValues

type WeChatUserPreviousValuesObject =
  | WeChatUserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'alias', args?: [] | false, alias?: string  } 
  | { name: 'conRemark', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 

type WeChatUserPreviousValuesFields =
  | 'id'
  | 'username'
  | 'alias'
  | 'conRemark'
  | 'nickname'



  

export interface WeChatUserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  alias: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  conRemark: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ChatRoomSubscriptionPayload

type ChatRoomSubscriptionPayloadObject =
  | ChatRoomSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ChatRoomSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ChatRoomSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChatRoomSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ChatRoom'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChatRoomSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoom | null> | prisma.ChatRoom | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ChatRoomPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChatRoomSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChatRoomPreviousValues | null> | prisma.ChatRoomPreviousValues | null
  }
}
  

// Types for ChatRoomPreviousValues

type ChatRoomPreviousValuesObject =
  | ChatRoomPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 
  | { name: 'displayName', args?: [] | false, alias?: string  } 
  | { name: 'modifyTime', args?: [] | false, alias?: string  } 

type ChatRoomPreviousValuesFields =
  | 'id'
  | 'username'
  | 'nickname'
  | 'displayName'
  | 'modifyTime'



  

export interface ChatRoomPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  displayName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  modifyTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for AvatarSubscriptionPayload

type AvatarSubscriptionPayloadObject =
  | AvatarSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AvatarSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AvatarSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Avatar'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AvatarSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AvatarPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AvatarSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarPreviousValues | null> | prisma.AvatarPreviousValues | null
  }
}
  

// Types for AvatarPreviousValues

type AvatarPreviousValuesObject =
  | AvatarPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type AvatarPreviousValuesFields =
  | 'id'



  

export interface AvatarPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ContactSubscriptionPayload

type ContactSubscriptionPayloadObject =
  | ContactSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ContactSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ContactSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ContactPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactPreviousValues | null> | prisma.ContactPreviousValues | null
  }
}
  

// Types for ContactPreviousValues

type ContactPreviousValuesObject =
  | ContactPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type ContactPreviousValuesFields =
  | 'id'
  | 'type'



  

export interface ContactPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MessageSubscriptionPayload

type MessageSubscriptionPayloadObject =
  | MessageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MessageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MessageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MessageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Message'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MessageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Message | null> | prisma.Message | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MessagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MessageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MessagePreviousValues | null> | prisma.MessagePreviousValues | null
  }
}
  

// Types for MessagePreviousValues

type MessagePreviousValuesObject =
  | MessagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'msgSvrId', args?: [] | false, alias?: string  } 
  | { name: 'isSend', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'createTime', args?: [] | false, alias?: string  } 

type MessagePreviousValuesFields =
  | 'id'
  | 'msgSvrId'
  | 'isSend'
  | 'type'
  | 'createTime'



  

export interface MessagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  msgSvrId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isSend: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ContentSubscriptionPayload

type ContentSubscriptionPayloadObject =
  | ContentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ContentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ContentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Content'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Content | null> | prisma.Content | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ContentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContentPreviousValues | null> | prisma.ContentPreviousValues | null
  }
}
  

// Types for ContentPreviousValues

type ContentPreviousValuesObject =
  | ContentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type ContentPreviousValuesFields =
  | 'id'



  

export interface ContentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TextSubscriptionPayload

type TextSubscriptionPayloadObject =
  | TextSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TextSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TextSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TextSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Text'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TextSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Text | null> | prisma.Text | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TextPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TextSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TextPreviousValues | null> | prisma.TextPreviousValues | null
  }
}
  

// Types for TextPreviousValues

type TextPreviousValuesObject =
  | TextPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'textMsg', args?: [] | false, alias?: string  } 

type TextPreviousValuesFields =
  | 'id'
  | 'textMsg'



  

export interface TextPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  textMsg: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ImageSubscriptionPayload

type ImageSubscriptionPayloadObject =
  | ImageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ImageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ImageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Image'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ImagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImagePreviousValues | null> | prisma.ImagePreviousValues | null
  }
}
  

// Types for ImagePreviousValues

type ImagePreviousValuesObject =
  | ImagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type ImagePreviousValuesFields =
  | 'id'



  

export interface ImagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VoiceSubscriptionPayload

type VoiceSubscriptionPayloadObject =
  | VoiceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VoiceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VoiceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Voice'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Voice | null> | prisma.Voice | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VoicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VoicePreviousValues | null> | prisma.VoicePreviousValues | null
  }
}
  

// Types for VoicePreviousValues

type VoicePreviousValuesObject =
  | VoicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'voiceLength', args?: [] | false, alias?: string  } 

type VoicePreviousValuesFields =
  | 'id'
  | 'voiceLength'



  

export interface VoicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  voiceLength: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for VideoSubscriptionPayload

type VideoSubscriptionPayloadObject =
  | VideoSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VideoSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VideoSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VideoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Video'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VideoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Video | null> | prisma.Video | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VideoPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VideoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VideoPreviousValues | null> | prisma.VideoPreviousValues | null
  }
}
  

// Types for VideoPreviousValues

type VideoPreviousValuesObject =
  | VideoPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'videolength', args?: [] | false, alias?: string  } 

type VideoPreviousValuesFields =
  | 'id'
  | 'videolength'



  

export interface VideoPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  videolength: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for FileSubscriptionPayload

type FileSubscriptionPayloadObject =
  | FileSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FileSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FileSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'File'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FilePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FilePreviousValues | null> | prisma.FilePreviousValues | null
  }
}
  

// Types for FilePreviousValues

type FilePreviousValuesObject =
  | FilePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 

type FilePreviousValuesFields =
  | 'id'
  | 'size'



  

export interface FilePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  size: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for AppSubscriptionPayload

type AppSubscriptionPayloadObject =
  | AppSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AppSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AppSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AppSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'App'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AppSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.App | null> | prisma.App | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AppPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AppSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AppPreviousValues | null> | prisma.AppPreviousValues | null
  }
}
  

// Types for AppPreviousValues

type AppPreviousValuesObject =
  | AppPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'xml', args?: [] | false, alias?: string  } 

type AppPreviousValuesFields =
  | 'id'
  | 'xml'



  

export interface AppPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  xml: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for FileIndexSubscriptionPayload

type FileIndexSubscriptionPayloadObject =
  | FileIndexSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FileIndexSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FileIndexSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileIndexSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FileIndex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileIndexSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndex | null> | prisma.FileIndex | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FileIndexPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileIndexSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileIndexPreviousValues | null> | prisma.FileIndexPreviousValues | null
  }
}
  

// Types for FileIndexPreviousValues

type FileIndexPreviousValuesObject =
  | FileIndexPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fileName', args?: [] | false, alias?: string  } 
  | { name: 'mimetype', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type FileIndexPreviousValuesFields =
  | 'id'
  | 'fileName'
  | 'mimetype'
  | 'size'
  | 'url'



  

export interface FileIndexPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fileName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  mimetype: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  size: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface WeChatWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  weChatOwner?: WeChatUserWhereInput | null
  weChatUsers_some?: WeChatUserWhereInput | null
  chatRooms_some?: ChatRoomWhereInput | null
  messages_some?: MessageWhereInput | null
  AND?: WeChatWhereInput[]
}
export type WeChatWhereInputInputObject =
  | Extract<keyof WeChatWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'weChatOwner', alias?: string  } 
  | { name: 'weChatUsers_some', alias?: string  } 
  | { name: 'chatRooms_some', alias?: string  } 
  | { name: 'messages_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface WeChatUserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  alias?: string | null
  alias_not?: string | null
  alias_in?: string[]
  alias_not_in?: string[]
  alias_lt?: string | null
  alias_lte?: string | null
  alias_gt?: string | null
  alias_gte?: string | null
  alias_contains?: string | null
  alias_not_contains?: string | null
  alias_starts_with?: string | null
  alias_not_starts_with?: string | null
  alias_ends_with?: string | null
  alias_not_ends_with?: string | null
  conRemark?: string | null
  conRemark_not?: string | null
  conRemark_in?: string[]
  conRemark_not_in?: string[]
  conRemark_lt?: string | null
  conRemark_lte?: string | null
  conRemark_gt?: string | null
  conRemark_gte?: string | null
  conRemark_contains?: string | null
  conRemark_not_contains?: string | null
  conRemark_starts_with?: string | null
  conRemark_not_starts_with?: string | null
  conRemark_ends_with?: string | null
  conRemark_not_ends_with?: string | null
  nickname?: string | null
  nickname_not?: string | null
  nickname_in?: string[]
  nickname_not_in?: string[]
  nickname_lt?: string | null
  nickname_lte?: string | null
  nickname_gt?: string | null
  nickname_gte?: string | null
  nickname_contains?: string | null
  nickname_not_contains?: string | null
  nickname_starts_with?: string | null
  nickname_not_starts_with?: string | null
  nickname_ends_with?: string | null
  nickname_not_ends_with?: string | null
  avatar?: AvatarWhereInput | null
  message_some?: MessageWhereInput | null
  haveChatRoom_some?: ChatRoomWhereInput | null
  joinChatRoom_some?: ChatRoomWhereInput | null
  contact?: ContactWhereInput | null
  AND?: WeChatUserWhereInput[]
}
export type WeChatUserWhereInputInputObject =
  | Extract<keyof WeChatUserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'alias_not', alias?: string  } 
  | { name: 'alias_in', alias?: string  } 
  | { name: 'alias_not_in', alias?: string  } 
  | { name: 'alias_lt', alias?: string  } 
  | { name: 'alias_lte', alias?: string  } 
  | { name: 'alias_gt', alias?: string  } 
  | { name: 'alias_gte', alias?: string  } 
  | { name: 'alias_contains', alias?: string  } 
  | { name: 'alias_not_contains', alias?: string  } 
  | { name: 'alias_starts_with', alias?: string  } 
  | { name: 'alias_not_starts_with', alias?: string  } 
  | { name: 'alias_ends_with', alias?: string  } 
  | { name: 'alias_not_ends_with', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'conRemark_not', alias?: string  } 
  | { name: 'conRemark_in', alias?: string  } 
  | { name: 'conRemark_not_in', alias?: string  } 
  | { name: 'conRemark_lt', alias?: string  } 
  | { name: 'conRemark_lte', alias?: string  } 
  | { name: 'conRemark_gt', alias?: string  } 
  | { name: 'conRemark_gte', alias?: string  } 
  | { name: 'conRemark_contains', alias?: string  } 
  | { name: 'conRemark_not_contains', alias?: string  } 
  | { name: 'conRemark_starts_with', alias?: string  } 
  | { name: 'conRemark_not_starts_with', alias?: string  } 
  | { name: 'conRemark_ends_with', alias?: string  } 
  | { name: 'conRemark_not_ends_with', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'nickname_not', alias?: string  } 
  | { name: 'nickname_in', alias?: string  } 
  | { name: 'nickname_not_in', alias?: string  } 
  | { name: 'nickname_lt', alias?: string  } 
  | { name: 'nickname_lte', alias?: string  } 
  | { name: 'nickname_gt', alias?: string  } 
  | { name: 'nickname_gte', alias?: string  } 
  | { name: 'nickname_contains', alias?: string  } 
  | { name: 'nickname_not_contains', alias?: string  } 
  | { name: 'nickname_starts_with', alias?: string  } 
  | { name: 'nickname_not_starts_with', alias?: string  } 
  | { name: 'nickname_ends_with', alias?: string  } 
  | { name: 'nickname_not_ends_with', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message_some', alias?: string  } 
  | { name: 'haveChatRoom_some', alias?: string  } 
  | { name: 'joinChatRoom_some', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AvatarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  thumbnailImg?: FileIndexWhereInput | null
  bigImg?: FileIndexWhereInput | null
  AND?: AvatarWhereInput[]
}
export type AvatarWhereInputInputObject =
  | Extract<keyof AvatarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface FileIndexWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fileName?: string | null
  fileName_not?: string | null
  fileName_in?: string[]
  fileName_not_in?: string[]
  fileName_lt?: string | null
  fileName_lte?: string | null
  fileName_gt?: string | null
  fileName_gte?: string | null
  fileName_contains?: string | null
  fileName_not_contains?: string | null
  fileName_starts_with?: string | null
  fileName_not_starts_with?: string | null
  fileName_ends_with?: string | null
  fileName_not_ends_with?: string | null
  mimetype?: string | null
  mimetype_not?: string | null
  mimetype_in?: string[]
  mimetype_not_in?: string[]
  mimetype_lt?: string | null
  mimetype_lte?: string | null
  mimetype_gt?: string | null
  mimetype_gte?: string | null
  mimetype_contains?: string | null
  mimetype_not_contains?: string | null
  mimetype_starts_with?: string | null
  mimetype_not_starts_with?: string | null
  mimetype_ends_with?: string | null
  mimetype_not_ends_with?: string | null
  size?: number | null
  size_not?: number | null
  size_in?: number[]
  size_not_in?: number[]
  size_lt?: number | null
  size_lte?: number | null
  size_gt?: number | null
  size_gte?: number | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  AND?: FileIndexWhereInput[]
}
export type FileIndexWhereInputInputObject =
  | Extract<keyof FileIndexWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'fileName_not', alias?: string  } 
  | { name: 'fileName_in', alias?: string  } 
  | { name: 'fileName_not_in', alias?: string  } 
  | { name: 'fileName_lt', alias?: string  } 
  | { name: 'fileName_lte', alias?: string  } 
  | { name: 'fileName_gt', alias?: string  } 
  | { name: 'fileName_gte', alias?: string  } 
  | { name: 'fileName_contains', alias?: string  } 
  | { name: 'fileName_not_contains', alias?: string  } 
  | { name: 'fileName_starts_with', alias?: string  } 
  | { name: 'fileName_not_starts_with', alias?: string  } 
  | { name: 'fileName_ends_with', alias?: string  } 
  | { name: 'fileName_not_ends_with', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'mimetype_not', alias?: string  } 
  | { name: 'mimetype_in', alias?: string  } 
  | { name: 'mimetype_not_in', alias?: string  } 
  | { name: 'mimetype_lt', alias?: string  } 
  | { name: 'mimetype_lte', alias?: string  } 
  | { name: 'mimetype_gt', alias?: string  } 
  | { name: 'mimetype_gte', alias?: string  } 
  | { name: 'mimetype_contains', alias?: string  } 
  | { name: 'mimetype_not_contains', alias?: string  } 
  | { name: 'mimetype_starts_with', alias?: string  } 
  | { name: 'mimetype_not_starts_with', alias?: string  } 
  | { name: 'mimetype_ends_with', alias?: string  } 
  | { name: 'mimetype_not_ends_with', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'size_not', alias?: string  } 
  | { name: 'size_in', alias?: string  } 
  | { name: 'size_not_in', alias?: string  } 
  | { name: 'size_lt', alias?: string  } 
  | { name: 'size_lte', alias?: string  } 
  | { name: 'size_gt', alias?: string  } 
  | { name: 'size_gte', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MessageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  msgSvrId?: string | null
  msgSvrId_not?: string | null
  msgSvrId_in?: string[]
  msgSvrId_not_in?: string[]
  msgSvrId_lt?: string | null
  msgSvrId_lte?: string | null
  msgSvrId_gt?: string | null
  msgSvrId_gte?: string | null
  msgSvrId_contains?: string | null
  msgSvrId_not_contains?: string | null
  msgSvrId_starts_with?: string | null
  msgSvrId_not_starts_with?: string | null
  msgSvrId_ends_with?: string | null
  msgSvrId_not_ends_with?: string | null
  isSend?: number | null
  isSend_not?: number | null
  isSend_in?: number[]
  isSend_not_in?: number[]
  isSend_lt?: number | null
  isSend_lte?: number | null
  isSend_gt?: number | null
  isSend_gte?: number | null
  type?: number | null
  type_not?: number | null
  type_in?: number[]
  type_not_in?: number[]
  type_lt?: number | null
  type_lte?: number | null
  type_gt?: number | null
  type_gte?: number | null
  talker?: WeChatUserWhereInput | null
  createTime?: string | null
  createTime_not?: string | null
  createTime_in?: string[]
  createTime_not_in?: string[]
  createTime_lt?: string | null
  createTime_lte?: string | null
  createTime_gt?: string | null
  createTime_gte?: string | null
  chatRoom?: ChatRoomWhereInput | null
  content?: ContentWhereInput | null
  AND?: MessageWhereInput[]
}
export type MessageWhereInputInputObject =
  | Extract<keyof MessageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'msgSvrId_not', alias?: string  } 
  | { name: 'msgSvrId_in', alias?: string  } 
  | { name: 'msgSvrId_not_in', alias?: string  } 
  | { name: 'msgSvrId_lt', alias?: string  } 
  | { name: 'msgSvrId_lte', alias?: string  } 
  | { name: 'msgSvrId_gt', alias?: string  } 
  | { name: 'msgSvrId_gte', alias?: string  } 
  | { name: 'msgSvrId_contains', alias?: string  } 
  | { name: 'msgSvrId_not_contains', alias?: string  } 
  | { name: 'msgSvrId_starts_with', alias?: string  } 
  | { name: 'msgSvrId_not_starts_with', alias?: string  } 
  | { name: 'msgSvrId_ends_with', alias?: string  } 
  | { name: 'msgSvrId_not_ends_with', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'isSend_not', alias?: string  } 
  | { name: 'isSend_in', alias?: string  } 
  | { name: 'isSend_not_in', alias?: string  } 
  | { name: 'isSend_lt', alias?: string  } 
  | { name: 'isSend_lte', alias?: string  } 
  | { name: 'isSend_gt', alias?: string  } 
  | { name: 'isSend_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'talker', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'createTime_not', alias?: string  } 
  | { name: 'createTime_in', alias?: string  } 
  | { name: 'createTime_not_in', alias?: string  } 
  | { name: 'createTime_lt', alias?: string  } 
  | { name: 'createTime_lte', alias?: string  } 
  | { name: 'createTime_gt', alias?: string  } 
  | { name: 'createTime_gte', alias?: string  } 
  | { name: 'chatRoom', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ChatRoomWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  nickname?: string | null
  nickname_not?: string | null
  nickname_in?: string[]
  nickname_not_in?: string[]
  nickname_lt?: string | null
  nickname_lte?: string | null
  nickname_gt?: string | null
  nickname_gte?: string | null
  nickname_contains?: string | null
  nickname_not_contains?: string | null
  nickname_starts_with?: string | null
  nickname_not_starts_with?: string | null
  nickname_ends_with?: string | null
  nickname_not_ends_with?: string | null
  displayName?: string | null
  displayName_not?: string | null
  displayName_in?: string[]
  displayName_not_in?: string[]
  displayName_lt?: string | null
  displayName_lte?: string | null
  displayName_gt?: string | null
  displayName_gte?: string | null
  displayName_contains?: string | null
  displayName_not_contains?: string | null
  displayName_starts_with?: string | null
  displayName_not_starts_with?: string | null
  displayName_ends_with?: string | null
  displayName_not_ends_with?: string | null
  owner?: WeChatUserWhereInput | null
  memberList_some?: WeChatUserWhereInput | null
  modifyTime?: string | null
  modifyTime_not?: string | null
  modifyTime_in?: string[]
  modifyTime_not_in?: string[]
  modifyTime_lt?: string | null
  modifyTime_lte?: string | null
  modifyTime_gt?: string | null
  modifyTime_gte?: string | null
  avatar?: AvatarWhereInput | null
  message_some?: MessageWhereInput | null
  AND?: ChatRoomWhereInput[]
}
export type ChatRoomWhereInputInputObject =
  | Extract<keyof ChatRoomWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'nickname_not', alias?: string  } 
  | { name: 'nickname_in', alias?: string  } 
  | { name: 'nickname_not_in', alias?: string  } 
  | { name: 'nickname_lt', alias?: string  } 
  | { name: 'nickname_lte', alias?: string  } 
  | { name: 'nickname_gt', alias?: string  } 
  | { name: 'nickname_gte', alias?: string  } 
  | { name: 'nickname_contains', alias?: string  } 
  | { name: 'nickname_not_contains', alias?: string  } 
  | { name: 'nickname_starts_with', alias?: string  } 
  | { name: 'nickname_not_starts_with', alias?: string  } 
  | { name: 'nickname_ends_with', alias?: string  } 
  | { name: 'nickname_not_ends_with', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'displayName_not', alias?: string  } 
  | { name: 'displayName_in', alias?: string  } 
  | { name: 'displayName_not_in', alias?: string  } 
  | { name: 'displayName_lt', alias?: string  } 
  | { name: 'displayName_lte', alias?: string  } 
  | { name: 'displayName_gt', alias?: string  } 
  | { name: 'displayName_gte', alias?: string  } 
  | { name: 'displayName_contains', alias?: string  } 
  | { name: 'displayName_not_contains', alias?: string  } 
  | { name: 'displayName_starts_with', alias?: string  } 
  | { name: 'displayName_not_starts_with', alias?: string  } 
  | { name: 'displayName_ends_with', alias?: string  } 
  | { name: 'displayName_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'memberList_some', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'modifyTime_not', alias?: string  } 
  | { name: 'modifyTime_in', alias?: string  } 
  | { name: 'modifyTime_not_in', alias?: string  } 
  | { name: 'modifyTime_lt', alias?: string  } 
  | { name: 'modifyTime_lte', alias?: string  } 
  | { name: 'modifyTime_gt', alias?: string  } 
  | { name: 'modifyTime_gte', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ContentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  text?: TextWhereInput | null
  image?: ImageWhereInput | null
  voice?: VoiceWhereInput | null
  video?: VideoWhereInput | null
  file?: FileWhereInput | null
  app?: AppWhereInput | null
  AND?: ContentWhereInput[]
}
export type ContentWhereInputInputObject =
  | Extract<keyof ContentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface TextWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  textMsg?: string | null
  textMsg_not?: string | null
  textMsg_in?: string[]
  textMsg_not_in?: string[]
  textMsg_lt?: string | null
  textMsg_lte?: string | null
  textMsg_gt?: string | null
  textMsg_gte?: string | null
  textMsg_contains?: string | null
  textMsg_not_contains?: string | null
  textMsg_starts_with?: string | null
  textMsg_not_starts_with?: string | null
  textMsg_ends_with?: string | null
  textMsg_not_ends_with?: string | null
  content?: ContentWhereInput | null
  AND?: TextWhereInput[]
}
export type TextWhereInputInputObject =
  | Extract<keyof TextWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'textMsg', alias?: string  } 
  | { name: 'textMsg_not', alias?: string  } 
  | { name: 'textMsg_in', alias?: string  } 
  | { name: 'textMsg_not_in', alias?: string  } 
  | { name: 'textMsg_lt', alias?: string  } 
  | { name: 'textMsg_lte', alias?: string  } 
  | { name: 'textMsg_gt', alias?: string  } 
  | { name: 'textMsg_gte', alias?: string  } 
  | { name: 'textMsg_contains', alias?: string  } 
  | { name: 'textMsg_not_contains', alias?: string  } 
  | { name: 'textMsg_starts_with', alias?: string  } 
  | { name: 'textMsg_not_starts_with', alias?: string  } 
  | { name: 'textMsg_ends_with', alias?: string  } 
  | { name: 'textMsg_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ImageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  thumbnailImg?: FileIndexWhereInput | null
  bigImg?: FileIndexWhereInput | null
  content?: ContentWhereInput | null
  AND?: ImageWhereInput[]
}
export type ImageWhereInputInputObject =
  | Extract<keyof ImageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface VoiceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fileName?: FileIndexWhereInput | null
  voiceLength?: number | null
  voiceLength_not?: number | null
  voiceLength_in?: number[]
  voiceLength_not_in?: number[]
  voiceLength_lt?: number | null
  voiceLength_lte?: number | null
  voiceLength_gt?: number | null
  voiceLength_gte?: number | null
  content?: ContentWhereInput | null
  AND?: VoiceWhereInput[]
}
export type VoiceWhereInputInputObject =
  | Extract<keyof VoiceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'voiceLength', alias?: string  } 
  | { name: 'voiceLength_not', alias?: string  } 
  | { name: 'voiceLength_in', alias?: string  } 
  | { name: 'voiceLength_not_in', alias?: string  } 
  | { name: 'voiceLength_lt', alias?: string  } 
  | { name: 'voiceLength_lte', alias?: string  } 
  | { name: 'voiceLength_gt', alias?: string  } 
  | { name: 'voiceLength_gte', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface VideoWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fileName?: FileIndexWhereInput | null
  thumbnailImg?: FileIndexWhereInput | null
  videolength?: number | null
  videolength_not?: number | null
  videolength_in?: number[]
  videolength_not_in?: number[]
  videolength_lt?: number | null
  videolength_lte?: number | null
  videolength_gt?: number | null
  videolength_gte?: number | null
  content?: ContentWhereInput | null
  AND?: VideoWhereInput[]
}
export type VideoWhereInputInputObject =
  | Extract<keyof VideoWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'videolength', alias?: string  } 
  | { name: 'videolength_not', alias?: string  } 
  | { name: 'videolength_in', alias?: string  } 
  | { name: 'videolength_not_in', alias?: string  } 
  | { name: 'videolength_lt', alias?: string  } 
  | { name: 'videolength_lte', alias?: string  } 
  | { name: 'videolength_gt', alias?: string  } 
  | { name: 'videolength_gte', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface FileWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fileName?: FileIndexWhereInput | null
  size?: number | null
  size_not?: number | null
  size_in?: number[]
  size_not_in?: number[]
  size_lt?: number | null
  size_lte?: number | null
  size_gt?: number | null
  size_gte?: number | null
  content?: ContentWhereInput | null
  AND?: FileWhereInput[]
}
export type FileWhereInputInputObject =
  | Extract<keyof FileWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'size_not', alias?: string  } 
  | { name: 'size_in', alias?: string  } 
  | { name: 'size_not_in', alias?: string  } 
  | { name: 'size_lt', alias?: string  } 
  | { name: 'size_lte', alias?: string  } 
  | { name: 'size_gt', alias?: string  } 
  | { name: 'size_gte', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AppWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  content?: ContentWhereInput | null
  AND?: AppWhereInput[]
}
export type AppWhereInputInputObject =
  | Extract<keyof AppWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ContactWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  weChatUser_some?: WeChatUserWhereInput | null
  AND?: ContactWhereInput[]
}
export type ContactWhereInputInputObject =
  | Extract<keyof ContactWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'weChatUser_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  weChat_some?: WeChatWhereInput | null
  AND?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'weChat_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface WeChatWhereUniqueInput {
  id?: string | null
}
export type WeChatWhereUniqueInputInputObject =
  | Extract<keyof WeChatWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface WeChatUserWhereUniqueInput {
  id?: string | null
  username?: string | null
}
export type WeChatUserWhereUniqueInputInputObject =
  | Extract<keyof WeChatUserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface ChatRoomWhereUniqueInput {
  id?: string | null
  username?: string | null
}
export type ChatRoomWhereUniqueInputInputObject =
  | Extract<keyof ChatRoomWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface AvatarWhereUniqueInput {
  id?: string | null
}
export type AvatarWhereUniqueInputInputObject =
  | Extract<keyof AvatarWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ContactWhereUniqueInput {
  id?: string | null
}
export type ContactWhereUniqueInputInputObject =
  | Extract<keyof ContactWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MessageWhereUniqueInput {
  id?: string | null
}
export type MessageWhereUniqueInputInputObject =
  | Extract<keyof MessageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ContentWhereUniqueInput {
  id?: string | null
}
export type ContentWhereUniqueInputInputObject =
  | Extract<keyof ContentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TextWhereUniqueInput {
  id?: string | null
}
export type TextWhereUniqueInputInputObject =
  | Extract<keyof TextWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ImageWhereUniqueInput {
  id?: string | null
}
export type ImageWhereUniqueInputInputObject =
  | Extract<keyof ImageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface VoiceWhereUniqueInput {
  id?: string | null
}
export type VoiceWhereUniqueInputInputObject =
  | Extract<keyof VoiceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface VideoWhereUniqueInput {
  id?: string | null
}
export type VideoWhereUniqueInputInputObject =
  | Extract<keyof VideoWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FileWhereUniqueInput {
  id?: string | null
}
export type FileWhereUniqueInputInputObject =
  | Extract<keyof FileWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AppWhereUniqueInput {
  id?: string | null
}
export type AppWhereUniqueInputInputObject =
  | Extract<keyof AppWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FileIndexWhereUniqueInput {
  id?: string | null
  fileName?: string | null
}
export type FileIndexWhereUniqueInputInputObject =
  | Extract<keyof FileIndexWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  
export interface UserCreateInput {
  email?: string
  name?: string
  password?: string
  weChat?: WeChatCreateManyInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'weChat', alias?: string  } 
  
export interface WeChatCreateManyInput {
  create?: WeChatCreateInput[]
  connect?: WeChatWhereUniqueInput[]
}
export type WeChatCreateManyInputInputObject =
  | Extract<keyof WeChatCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatCreateInput {
  weChatOwner?: WeChatUserCreateOneInput
  weChatUsers?: WeChatUserCreateManyInput | null
  chatRooms?: ChatRoomCreateManyInput | null
  messages?: MessageCreateManyInput | null
}
export type WeChatCreateInputInputObject =
  | Extract<keyof WeChatCreateInput, string>
  | { name: 'weChatOwner', alias?: string  } 
  | { name: 'weChatUsers', alias?: string  } 
  | { name: 'chatRooms', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface WeChatUserCreateOneInput {
  create?: WeChatUserCreateInput | null
  connect?: WeChatUserWhereUniqueInput | null
}
export type WeChatUserCreateOneInputInputObject =
  | Extract<keyof WeChatUserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserCreateInput {
  username?: string
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarCreateOneInput | null
  message?: MessageCreateManyWithoutTalkerInput | null
  haveChatRoom?: ChatRoomCreateManyWithoutOwnerInput | null
  joinChatRoom?: ChatRoomCreateManyWithoutMemberListInput | null
  contact?: ContactCreateOneWithoutWeChatUserInput | null
}
export type WeChatUserCreateInputInputObject =
  | Extract<keyof WeChatUserCreateInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface AvatarCreateOneInput {
  create?: AvatarCreateInput | null
  connect?: AvatarWhereUniqueInput | null
}
export type AvatarCreateOneInputInputObject =
  | Extract<keyof AvatarCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AvatarCreateInput {
  thumbnailImg?: FileIndexCreateOneInput | null
  bigImg?: FileIndexCreateOneInput | null
}
export type AvatarCreateInputInputObject =
  | Extract<keyof AvatarCreateInput, string>
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  
export interface FileIndexCreateOneInput {
  create?: FileIndexCreateInput | null
  connect?: FileIndexWhereUniqueInput | null
}
export type FileIndexCreateOneInputInputObject =
  | Extract<keyof FileIndexCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FileIndexCreateInput {
  fileName?: string
  mimetype?: string
  size?: number
  url?: string | null
}
export type FileIndexCreateInputInputObject =
  | Extract<keyof FileIndexCreateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface MessageCreateManyWithoutTalkerInput {
  create?: MessageCreateWithoutTalkerInput[]
  connect?: MessageWhereUniqueInput[]
}
export type MessageCreateManyWithoutTalkerInputInputObject =
  | Extract<keyof MessageCreateManyWithoutTalkerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MessageCreateWithoutTalkerInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  createTime?: string | null
  chatRoom?: ChatRoomCreateOneWithoutMessageInput | null
  content?: ContentCreateOneInput | null
}
export type MessageCreateWithoutTalkerInputInputObject =
  | Extract<keyof MessageCreateWithoutTalkerInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'chatRoom', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ChatRoomCreateOneWithoutMessageInput {
  create?: ChatRoomCreateWithoutMessageInput | null
  connect?: ChatRoomWhereUniqueInput | null
}
export type ChatRoomCreateOneWithoutMessageInputInputObject =
  | Extract<keyof ChatRoomCreateOneWithoutMessageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ChatRoomCreateWithoutMessageInput {
  username?: string
  nickname?: string | null
  displayName?: string
  owner?: WeChatUserCreateOneWithoutHaveChatRoomInput
  memberList?: WeChatUserCreateManyWithoutJoinChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarCreateOneInput | null
}
export type ChatRoomCreateWithoutMessageInputInputObject =
  | Extract<keyof ChatRoomCreateWithoutMessageInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'memberList', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface WeChatUserCreateOneWithoutHaveChatRoomInput {
  create?: WeChatUserCreateWithoutHaveChatRoomInput | null
  connect?: WeChatUserWhereUniqueInput | null
}
export type WeChatUserCreateOneWithoutHaveChatRoomInputInputObject =
  | Extract<keyof WeChatUserCreateOneWithoutHaveChatRoomInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserCreateWithoutHaveChatRoomInput {
  username?: string
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarCreateOneInput | null
  message?: MessageCreateManyWithoutTalkerInput | null
  joinChatRoom?: ChatRoomCreateManyWithoutMemberListInput | null
  contact?: ContactCreateOneWithoutWeChatUserInput | null
}
export type WeChatUserCreateWithoutHaveChatRoomInputInputObject =
  | Extract<keyof WeChatUserCreateWithoutHaveChatRoomInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface ChatRoomCreateManyWithoutMemberListInput {
  create?: ChatRoomCreateWithoutMemberListInput[]
  connect?: ChatRoomWhereUniqueInput[]
}
export type ChatRoomCreateManyWithoutMemberListInputInputObject =
  | Extract<keyof ChatRoomCreateManyWithoutMemberListInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ChatRoomCreateWithoutMemberListInput {
  username?: string
  nickname?: string | null
  displayName?: string
  owner?: WeChatUserCreateOneWithoutHaveChatRoomInput
  modifyTime?: string | null
  avatar?: AvatarCreateOneInput | null
  message?: MessageCreateManyWithoutChatRoomInput | null
}
export type ChatRoomCreateWithoutMemberListInputInputObject =
  | Extract<keyof ChatRoomCreateWithoutMemberListInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface MessageCreateManyWithoutChatRoomInput {
  create?: MessageCreateWithoutChatRoomInput[]
  connect?: MessageWhereUniqueInput[]
}
export type MessageCreateManyWithoutChatRoomInputInputObject =
  | Extract<keyof MessageCreateManyWithoutChatRoomInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MessageCreateWithoutChatRoomInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  talker?: WeChatUserCreateOneWithoutMessageInput
  createTime?: string | null
  content?: ContentCreateOneInput | null
}
export type MessageCreateWithoutChatRoomInputInputObject =
  | Extract<keyof MessageCreateWithoutChatRoomInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'talker', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface WeChatUserCreateOneWithoutMessageInput {
  create?: WeChatUserCreateWithoutMessageInput | null
  connect?: WeChatUserWhereUniqueInput | null
}
export type WeChatUserCreateOneWithoutMessageInputInputObject =
  | Extract<keyof WeChatUserCreateOneWithoutMessageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserCreateWithoutMessageInput {
  username?: string
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarCreateOneInput | null
  haveChatRoom?: ChatRoomCreateManyWithoutOwnerInput | null
  joinChatRoom?: ChatRoomCreateManyWithoutMemberListInput | null
  contact?: ContactCreateOneWithoutWeChatUserInput | null
}
export type WeChatUserCreateWithoutMessageInputInputObject =
  | Extract<keyof WeChatUserCreateWithoutMessageInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface ChatRoomCreateManyWithoutOwnerInput {
  create?: ChatRoomCreateWithoutOwnerInput[]
  connect?: ChatRoomWhereUniqueInput[]
}
export type ChatRoomCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof ChatRoomCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ChatRoomCreateWithoutOwnerInput {
  username?: string
  nickname?: string | null
  displayName?: string
  memberList?: WeChatUserCreateManyWithoutJoinChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarCreateOneInput | null
  message?: MessageCreateManyWithoutChatRoomInput | null
}
export type ChatRoomCreateWithoutOwnerInputInputObject =
  | Extract<keyof ChatRoomCreateWithoutOwnerInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'memberList', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface WeChatUserCreateManyWithoutJoinChatRoomInput {
  create?: WeChatUserCreateWithoutJoinChatRoomInput[]
  connect?: WeChatUserWhereUniqueInput[]
}
export type WeChatUserCreateManyWithoutJoinChatRoomInputInputObject =
  | Extract<keyof WeChatUserCreateManyWithoutJoinChatRoomInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserCreateWithoutJoinChatRoomInput {
  username?: string
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarCreateOneInput | null
  message?: MessageCreateManyWithoutTalkerInput | null
  haveChatRoom?: ChatRoomCreateManyWithoutOwnerInput | null
  contact?: ContactCreateOneWithoutWeChatUserInput | null
}
export type WeChatUserCreateWithoutJoinChatRoomInputInputObject =
  | Extract<keyof WeChatUserCreateWithoutJoinChatRoomInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface ContactCreateOneWithoutWeChatUserInput {
  create?: ContactCreateWithoutWeChatUserInput | null
  connect?: ContactWhereUniqueInput | null
}
export type ContactCreateOneWithoutWeChatUserInputInputObject =
  | Extract<keyof ContactCreateOneWithoutWeChatUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactCreateWithoutWeChatUserInput {
  type?: string
}
export type ContactCreateWithoutWeChatUserInputInputObject =
  | Extract<keyof ContactCreateWithoutWeChatUserInput, string>
  | { name: 'type', alias?: string  } 
  
export interface ContentCreateOneInput {
  create?: ContentCreateInput | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentCreateOneInputInputObject =
  | Extract<keyof ContentCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentCreateInput {
  text?: TextCreateOneWithoutContentInput | null
  image?: ImageCreateOneWithoutContentInput | null
  voice?: VoiceCreateOneWithoutContentInput | null
  video?: VideoCreateOneWithoutContentInput | null
  file?: FileCreateOneWithoutContentInput | null
  app?: AppCreateOneWithoutContentInput | null
}
export type ContentCreateInputInputObject =
  | Extract<keyof ContentCreateInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface TextCreateOneWithoutContentInput {
  create?: TextCreateWithoutContentInput | null
  connect?: TextWhereUniqueInput | null
}
export type TextCreateOneWithoutContentInputInputObject =
  | Extract<keyof TextCreateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TextCreateWithoutContentInput {
  textMsg?: string
}
export type TextCreateWithoutContentInputInputObject =
  | Extract<keyof TextCreateWithoutContentInput, string>
  | { name: 'textMsg', alias?: string  } 
  
export interface ImageCreateOneWithoutContentInput {
  create?: ImageCreateWithoutContentInput | null
  connect?: ImageWhereUniqueInput | null
}
export type ImageCreateOneWithoutContentInputInputObject =
  | Extract<keyof ImageCreateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ImageCreateWithoutContentInput {
  thumbnailImg?: FileIndexCreateOneInput | null
  bigImg?: FileIndexCreateOneInput | null
}
export type ImageCreateWithoutContentInputInputObject =
  | Extract<keyof ImageCreateWithoutContentInput, string>
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  
export interface VoiceCreateOneWithoutContentInput {
  create?: VoiceCreateWithoutContentInput | null
  connect?: VoiceWhereUniqueInput | null
}
export type VoiceCreateOneWithoutContentInputInputObject =
  | Extract<keyof VoiceCreateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VoiceCreateWithoutContentInput {
  fileName?: FileIndexCreateOneInput | null
  voiceLength?: number | null
}
export type VoiceCreateWithoutContentInputInputObject =
  | Extract<keyof VoiceCreateWithoutContentInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'voiceLength', alias?: string  } 
  
export interface VideoCreateOneWithoutContentInput {
  create?: VideoCreateWithoutContentInput | null
  connect?: VideoWhereUniqueInput | null
}
export type VideoCreateOneWithoutContentInputInputObject =
  | Extract<keyof VideoCreateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VideoCreateWithoutContentInput {
  fileName?: FileIndexCreateOneInput | null
  thumbnailImg?: FileIndexCreateOneInput | null
  videolength?: number | null
}
export type VideoCreateWithoutContentInputInputObject =
  | Extract<keyof VideoCreateWithoutContentInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'videolength', alias?: string  } 
  
export interface FileCreateOneWithoutContentInput {
  create?: FileCreateWithoutContentInput | null
  connect?: FileWhereUniqueInput | null
}
export type FileCreateOneWithoutContentInputInputObject =
  | Extract<keyof FileCreateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FileCreateWithoutContentInput {
  fileName?: FileIndexCreateOneInput | null
  size?: number | null
}
export type FileCreateWithoutContentInputInputObject =
  | Extract<keyof FileCreateWithoutContentInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'size', alias?: string  } 
  
export interface AppCreateOneWithoutContentInput {
  create?: AppCreateWithoutContentInput | null
  connect?: AppWhereUniqueInput | null
}
export type AppCreateOneWithoutContentInputInputObject =
  | Extract<keyof AppCreateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AppCreateWithoutContentInput {
  xml?: undefined | null
}
export type AppCreateWithoutContentInputInputObject =
  | Extract<keyof AppCreateWithoutContentInput, string>
  | { name: 'xml', alias?: string  } 
  
export interface WeChatUserCreateManyInput {
  create?: WeChatUserCreateInput[]
  connect?: WeChatUserWhereUniqueInput[]
}
export type WeChatUserCreateManyInputInputObject =
  | Extract<keyof WeChatUserCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ChatRoomCreateManyInput {
  create?: ChatRoomCreateInput[]
  connect?: ChatRoomWhereUniqueInput[]
}
export type ChatRoomCreateManyInputInputObject =
  | Extract<keyof ChatRoomCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ChatRoomCreateInput {
  username?: string
  nickname?: string | null
  displayName?: string
  owner?: WeChatUserCreateOneWithoutHaveChatRoomInput
  memberList?: WeChatUserCreateManyWithoutJoinChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarCreateOneInput | null
  message?: MessageCreateManyWithoutChatRoomInput | null
}
export type ChatRoomCreateInputInputObject =
  | Extract<keyof ChatRoomCreateInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'memberList', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface MessageCreateManyInput {
  create?: MessageCreateInput[]
  connect?: MessageWhereUniqueInput[]
}
export type MessageCreateManyInputInputObject =
  | Extract<keyof MessageCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MessageCreateInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  talker?: WeChatUserCreateOneWithoutMessageInput
  createTime?: string | null
  chatRoom?: ChatRoomCreateOneWithoutMessageInput | null
  content?: ContentCreateOneInput | null
}
export type MessageCreateInputInputObject =
  | Extract<keyof MessageCreateInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'talker', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'chatRoom', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
  password?: string | null
  weChat?: WeChatUpdateManyInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'weChat', alias?: string  } 
  
export interface WeChatUpdateManyInput {
  create?: WeChatCreateInput[]
  update?: WeChatUpdateWithWhereUniqueNestedInput[]
  upsert?: WeChatUpsertWithWhereUniqueNestedInput[]
  delete?: WeChatWhereUniqueInput[]
  connect?: WeChatWhereUniqueInput[]
  set?: WeChatWhereUniqueInput[]
  disconnect?: WeChatWhereUniqueInput[]
  deleteMany?: WeChatScalarWhereInput[]
}
export type WeChatUpdateManyInputInputObject =
  | Extract<keyof WeChatUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  
export interface WeChatUpdateWithWhereUniqueNestedInput {
  where?: WeChatWhereUniqueInput
  data?: WeChatUpdateDataInput
}
export type WeChatUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof WeChatUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WeChatUpdateDataInput {
  weChatOwner?: WeChatUserUpdateOneRequiredInput | null
  weChatUsers?: WeChatUserUpdateManyInput | null
  chatRooms?: ChatRoomUpdateManyInput | null
  messages?: MessageUpdateManyInput | null
}
export type WeChatUpdateDataInputInputObject =
  | Extract<keyof WeChatUpdateDataInput, string>
  | { name: 'weChatOwner', alias?: string  } 
  | { name: 'weChatUsers', alias?: string  } 
  | { name: 'chatRooms', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface WeChatUserUpdateOneRequiredInput {
  create?: WeChatUserCreateInput | null
  update?: WeChatUserUpdateDataInput | null
  upsert?: WeChatUserUpsertNestedInput | null
  connect?: WeChatUserWhereUniqueInput | null
}
export type WeChatUserUpdateOneRequiredInputInputObject =
  | Extract<keyof WeChatUserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserUpdateDataInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutTalkerInput | null
  haveChatRoom?: ChatRoomUpdateManyWithoutOwnerInput | null
  joinChatRoom?: ChatRoomUpdateManyWithoutMemberListInput | null
  contact?: ContactUpdateOneWithoutWeChatUserInput | null
}
export type WeChatUserUpdateDataInputInputObject =
  | Extract<keyof WeChatUserUpdateDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface AvatarUpdateOneInput {
  create?: AvatarCreateInput | null
  update?: AvatarUpdateDataInput | null
  upsert?: AvatarUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AvatarWhereUniqueInput | null
}
export type AvatarUpdateOneInputInputObject =
  | Extract<keyof AvatarUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AvatarUpdateDataInput {
  thumbnailImg?: FileIndexUpdateOneInput | null
  bigImg?: FileIndexUpdateOneInput | null
}
export type AvatarUpdateDataInputInputObject =
  | Extract<keyof AvatarUpdateDataInput, string>
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  
export interface FileIndexUpdateOneInput {
  create?: FileIndexCreateInput | null
  update?: FileIndexUpdateDataInput | null
  upsert?: FileIndexUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: FileIndexWhereUniqueInput | null
}
export type FileIndexUpdateOneInputInputObject =
  | Extract<keyof FileIndexUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FileIndexUpdateDataInput {
  fileName?: string | null
  mimetype?: string | null
  size?: number | null
  url?: string | null
}
export type FileIndexUpdateDataInputInputObject =
  | Extract<keyof FileIndexUpdateDataInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface FileIndexUpsertNestedInput {
  update?: FileIndexUpdateDataInput
  create?: FileIndexCreateInput
}
export type FileIndexUpsertNestedInputInputObject =
  | Extract<keyof FileIndexUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AvatarUpsertNestedInput {
  update?: AvatarUpdateDataInput
  create?: AvatarCreateInput
}
export type AvatarUpsertNestedInputInputObject =
  | Extract<keyof AvatarUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MessageUpdateManyWithoutTalkerInput {
  create?: MessageCreateWithoutTalkerInput[]
  delete?: MessageWhereUniqueInput[]
  connect?: MessageWhereUniqueInput[]
  set?: MessageWhereUniqueInput[]
  disconnect?: MessageWhereUniqueInput[]
  update?: MessageUpdateWithWhereUniqueWithoutTalkerInput[]
  upsert?: MessageUpsertWithWhereUniqueWithoutTalkerInput[]
  deleteMany?: MessageScalarWhereInput[]
  updateMany?: MessageUpdateManyWithWhereNestedInput[]
}
export type MessageUpdateManyWithoutTalkerInputInputObject =
  | Extract<keyof MessageUpdateManyWithoutTalkerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MessageUpdateWithWhereUniqueWithoutTalkerInput {
  where?: MessageWhereUniqueInput
  data?: MessageUpdateWithoutTalkerDataInput
}
export type MessageUpdateWithWhereUniqueWithoutTalkerInputInputObject =
  | Extract<keyof MessageUpdateWithWhereUniqueWithoutTalkerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MessageUpdateWithoutTalkerDataInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  createTime?: string | null
  chatRoom?: ChatRoomUpdateOneWithoutMessageInput | null
  content?: ContentUpdateOneInput | null
}
export type MessageUpdateWithoutTalkerDataInputInputObject =
  | Extract<keyof MessageUpdateWithoutTalkerDataInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'chatRoom', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ChatRoomUpdateOneWithoutMessageInput {
  create?: ChatRoomCreateWithoutMessageInput | null
  update?: ChatRoomUpdateWithoutMessageDataInput | null
  upsert?: ChatRoomUpsertWithoutMessageInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ChatRoomWhereUniqueInput | null
}
export type ChatRoomUpdateOneWithoutMessageInputInputObject =
  | Extract<keyof ChatRoomUpdateOneWithoutMessageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ChatRoomUpdateWithoutMessageDataInput {
  username?: string | null
  nickname?: string | null
  displayName?: string | null
  owner?: WeChatUserUpdateOneRequiredWithoutHaveChatRoomInput | null
  memberList?: WeChatUserUpdateManyWithoutJoinChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarUpdateOneInput | null
}
export type ChatRoomUpdateWithoutMessageDataInputInputObject =
  | Extract<keyof ChatRoomUpdateWithoutMessageDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'memberList', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface WeChatUserUpdateOneRequiredWithoutHaveChatRoomInput {
  create?: WeChatUserCreateWithoutHaveChatRoomInput | null
  update?: WeChatUserUpdateWithoutHaveChatRoomDataInput | null
  upsert?: WeChatUserUpsertWithoutHaveChatRoomInput | null
  connect?: WeChatUserWhereUniqueInput | null
}
export type WeChatUserUpdateOneRequiredWithoutHaveChatRoomInputInputObject =
  | Extract<keyof WeChatUserUpdateOneRequiredWithoutHaveChatRoomInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserUpdateWithoutHaveChatRoomDataInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutTalkerInput | null
  joinChatRoom?: ChatRoomUpdateManyWithoutMemberListInput | null
  contact?: ContactUpdateOneWithoutWeChatUserInput | null
}
export type WeChatUserUpdateWithoutHaveChatRoomDataInputInputObject =
  | Extract<keyof WeChatUserUpdateWithoutHaveChatRoomDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface ChatRoomUpdateManyWithoutMemberListInput {
  create?: ChatRoomCreateWithoutMemberListInput[]
  delete?: ChatRoomWhereUniqueInput[]
  connect?: ChatRoomWhereUniqueInput[]
  set?: ChatRoomWhereUniqueInput[]
  disconnect?: ChatRoomWhereUniqueInput[]
  update?: ChatRoomUpdateWithWhereUniqueWithoutMemberListInput[]
  upsert?: ChatRoomUpsertWithWhereUniqueWithoutMemberListInput[]
  deleteMany?: ChatRoomScalarWhereInput[]
  updateMany?: ChatRoomUpdateManyWithWhereNestedInput[]
}
export type ChatRoomUpdateManyWithoutMemberListInputInputObject =
  | Extract<keyof ChatRoomUpdateManyWithoutMemberListInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ChatRoomUpdateWithWhereUniqueWithoutMemberListInput {
  where?: ChatRoomWhereUniqueInput
  data?: ChatRoomUpdateWithoutMemberListDataInput
}
export type ChatRoomUpdateWithWhereUniqueWithoutMemberListInputInputObject =
  | Extract<keyof ChatRoomUpdateWithWhereUniqueWithoutMemberListInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ChatRoomUpdateWithoutMemberListDataInput {
  username?: string | null
  nickname?: string | null
  displayName?: string | null
  owner?: WeChatUserUpdateOneRequiredWithoutHaveChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutChatRoomInput | null
}
export type ChatRoomUpdateWithoutMemberListDataInputInputObject =
  | Extract<keyof ChatRoomUpdateWithoutMemberListDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface MessageUpdateManyWithoutChatRoomInput {
  create?: MessageCreateWithoutChatRoomInput[]
  delete?: MessageWhereUniqueInput[]
  connect?: MessageWhereUniqueInput[]
  set?: MessageWhereUniqueInput[]
  disconnect?: MessageWhereUniqueInput[]
  update?: MessageUpdateWithWhereUniqueWithoutChatRoomInput[]
  upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomInput[]
  deleteMany?: MessageScalarWhereInput[]
  updateMany?: MessageUpdateManyWithWhereNestedInput[]
}
export type MessageUpdateManyWithoutChatRoomInputInputObject =
  | Extract<keyof MessageUpdateManyWithoutChatRoomInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MessageUpdateWithWhereUniqueWithoutChatRoomInput {
  where?: MessageWhereUniqueInput
  data?: MessageUpdateWithoutChatRoomDataInput
}
export type MessageUpdateWithWhereUniqueWithoutChatRoomInputInputObject =
  | Extract<keyof MessageUpdateWithWhereUniqueWithoutChatRoomInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MessageUpdateWithoutChatRoomDataInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  talker?: WeChatUserUpdateOneRequiredWithoutMessageInput | null
  createTime?: string | null
  content?: ContentUpdateOneInput | null
}
export type MessageUpdateWithoutChatRoomDataInputInputObject =
  | Extract<keyof MessageUpdateWithoutChatRoomDataInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'talker', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface WeChatUserUpdateOneRequiredWithoutMessageInput {
  create?: WeChatUserCreateWithoutMessageInput | null
  update?: WeChatUserUpdateWithoutMessageDataInput | null
  upsert?: WeChatUserUpsertWithoutMessageInput | null
  connect?: WeChatUserWhereUniqueInput | null
}
export type WeChatUserUpdateOneRequiredWithoutMessageInputInputObject =
  | Extract<keyof WeChatUserUpdateOneRequiredWithoutMessageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserUpdateWithoutMessageDataInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarUpdateOneInput | null
  haveChatRoom?: ChatRoomUpdateManyWithoutOwnerInput | null
  joinChatRoom?: ChatRoomUpdateManyWithoutMemberListInput | null
  contact?: ContactUpdateOneWithoutWeChatUserInput | null
}
export type WeChatUserUpdateWithoutMessageDataInputInputObject =
  | Extract<keyof WeChatUserUpdateWithoutMessageDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface ChatRoomUpdateManyWithoutOwnerInput {
  create?: ChatRoomCreateWithoutOwnerInput[]
  delete?: ChatRoomWhereUniqueInput[]
  connect?: ChatRoomWhereUniqueInput[]
  set?: ChatRoomWhereUniqueInput[]
  disconnect?: ChatRoomWhereUniqueInput[]
  update?: ChatRoomUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: ChatRoomUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: ChatRoomScalarWhereInput[]
  updateMany?: ChatRoomUpdateManyWithWhereNestedInput[]
}
export type ChatRoomUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof ChatRoomUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ChatRoomUpdateWithWhereUniqueWithoutOwnerInput {
  where?: ChatRoomWhereUniqueInput
  data?: ChatRoomUpdateWithoutOwnerDataInput
}
export type ChatRoomUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof ChatRoomUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ChatRoomUpdateWithoutOwnerDataInput {
  username?: string | null
  nickname?: string | null
  displayName?: string | null
  memberList?: WeChatUserUpdateManyWithoutJoinChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutChatRoomInput | null
}
export type ChatRoomUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof ChatRoomUpdateWithoutOwnerDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'memberList', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface WeChatUserUpdateManyWithoutJoinChatRoomInput {
  create?: WeChatUserCreateWithoutJoinChatRoomInput[]
  delete?: WeChatUserWhereUniqueInput[]
  connect?: WeChatUserWhereUniqueInput[]
  set?: WeChatUserWhereUniqueInput[]
  disconnect?: WeChatUserWhereUniqueInput[]
  update?: WeChatUserUpdateWithWhereUniqueWithoutJoinChatRoomInput[]
  upsert?: WeChatUserUpsertWithWhereUniqueWithoutJoinChatRoomInput[]
  deleteMany?: WeChatUserScalarWhereInput[]
  updateMany?: WeChatUserUpdateManyWithWhereNestedInput[]
}
export type WeChatUserUpdateManyWithoutJoinChatRoomInputInputObject =
  | Extract<keyof WeChatUserUpdateManyWithoutJoinChatRoomInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface WeChatUserUpdateWithWhereUniqueWithoutJoinChatRoomInput {
  where?: WeChatUserWhereUniqueInput
  data?: WeChatUserUpdateWithoutJoinChatRoomDataInput
}
export type WeChatUserUpdateWithWhereUniqueWithoutJoinChatRoomInputInputObject =
  | Extract<keyof WeChatUserUpdateWithWhereUniqueWithoutJoinChatRoomInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WeChatUserUpdateWithoutJoinChatRoomDataInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutTalkerInput | null
  haveChatRoom?: ChatRoomUpdateManyWithoutOwnerInput | null
  contact?: ContactUpdateOneWithoutWeChatUserInput | null
}
export type WeChatUserUpdateWithoutJoinChatRoomDataInputInputObject =
  | Extract<keyof WeChatUserUpdateWithoutJoinChatRoomDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface ContactUpdateOneWithoutWeChatUserInput {
  create?: ContactCreateWithoutWeChatUserInput | null
  update?: ContactUpdateWithoutWeChatUserDataInput | null
  upsert?: ContactUpsertWithoutWeChatUserInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContactWhereUniqueInput | null
}
export type ContactUpdateOneWithoutWeChatUserInputInputObject =
  | Extract<keyof ContactUpdateOneWithoutWeChatUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactUpdateWithoutWeChatUserDataInput {
  type?: string | null
}
export type ContactUpdateWithoutWeChatUserDataInputInputObject =
  | Extract<keyof ContactUpdateWithoutWeChatUserDataInput, string>
  | { name: 'type', alias?: string  } 
  
export interface ContactUpsertWithoutWeChatUserInput {
  update?: ContactUpdateWithoutWeChatUserDataInput
  create?: ContactCreateWithoutWeChatUserInput
}
export type ContactUpsertWithoutWeChatUserInputInputObject =
  | Extract<keyof ContactUpsertWithoutWeChatUserInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WeChatUserUpsertWithWhereUniqueWithoutJoinChatRoomInput {
  where?: WeChatUserWhereUniqueInput
  update?: WeChatUserUpdateWithoutJoinChatRoomDataInput
  create?: WeChatUserCreateWithoutJoinChatRoomInput
}
export type WeChatUserUpsertWithWhereUniqueWithoutJoinChatRoomInputInputObject =
  | Extract<keyof WeChatUserUpsertWithWhereUniqueWithoutJoinChatRoomInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WeChatUserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  alias?: string | null
  alias_not?: string | null
  alias_in?: string[]
  alias_not_in?: string[]
  alias_lt?: string | null
  alias_lte?: string | null
  alias_gt?: string | null
  alias_gte?: string | null
  alias_contains?: string | null
  alias_not_contains?: string | null
  alias_starts_with?: string | null
  alias_not_starts_with?: string | null
  alias_ends_with?: string | null
  alias_not_ends_with?: string | null
  conRemark?: string | null
  conRemark_not?: string | null
  conRemark_in?: string[]
  conRemark_not_in?: string[]
  conRemark_lt?: string | null
  conRemark_lte?: string | null
  conRemark_gt?: string | null
  conRemark_gte?: string | null
  conRemark_contains?: string | null
  conRemark_not_contains?: string | null
  conRemark_starts_with?: string | null
  conRemark_not_starts_with?: string | null
  conRemark_ends_with?: string | null
  conRemark_not_ends_with?: string | null
  nickname?: string | null
  nickname_not?: string | null
  nickname_in?: string[]
  nickname_not_in?: string[]
  nickname_lt?: string | null
  nickname_lte?: string | null
  nickname_gt?: string | null
  nickname_gte?: string | null
  nickname_contains?: string | null
  nickname_not_contains?: string | null
  nickname_starts_with?: string | null
  nickname_not_starts_with?: string | null
  nickname_ends_with?: string | null
  nickname_not_ends_with?: string | null
  AND?: WeChatUserScalarWhereInput[]
  OR?: WeChatUserScalarWhereInput[]
  NOT?: WeChatUserScalarWhereInput[]
}
export type WeChatUserScalarWhereInputInputObject =
  | Extract<keyof WeChatUserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'alias_not', alias?: string  } 
  | { name: 'alias_in', alias?: string  } 
  | { name: 'alias_not_in', alias?: string  } 
  | { name: 'alias_lt', alias?: string  } 
  | { name: 'alias_lte', alias?: string  } 
  | { name: 'alias_gt', alias?: string  } 
  | { name: 'alias_gte', alias?: string  } 
  | { name: 'alias_contains', alias?: string  } 
  | { name: 'alias_not_contains', alias?: string  } 
  | { name: 'alias_starts_with', alias?: string  } 
  | { name: 'alias_not_starts_with', alias?: string  } 
  | { name: 'alias_ends_with', alias?: string  } 
  | { name: 'alias_not_ends_with', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'conRemark_not', alias?: string  } 
  | { name: 'conRemark_in', alias?: string  } 
  | { name: 'conRemark_not_in', alias?: string  } 
  | { name: 'conRemark_lt', alias?: string  } 
  | { name: 'conRemark_lte', alias?: string  } 
  | { name: 'conRemark_gt', alias?: string  } 
  | { name: 'conRemark_gte', alias?: string  } 
  | { name: 'conRemark_contains', alias?: string  } 
  | { name: 'conRemark_not_contains', alias?: string  } 
  | { name: 'conRemark_starts_with', alias?: string  } 
  | { name: 'conRemark_not_starts_with', alias?: string  } 
  | { name: 'conRemark_ends_with', alias?: string  } 
  | { name: 'conRemark_not_ends_with', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'nickname_not', alias?: string  } 
  | { name: 'nickname_in', alias?: string  } 
  | { name: 'nickname_not_in', alias?: string  } 
  | { name: 'nickname_lt', alias?: string  } 
  | { name: 'nickname_lte', alias?: string  } 
  | { name: 'nickname_gt', alias?: string  } 
  | { name: 'nickname_gte', alias?: string  } 
  | { name: 'nickname_contains', alias?: string  } 
  | { name: 'nickname_not_contains', alias?: string  } 
  | { name: 'nickname_starts_with', alias?: string  } 
  | { name: 'nickname_not_starts_with', alias?: string  } 
  | { name: 'nickname_ends_with', alias?: string  } 
  | { name: 'nickname_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WeChatUserUpdateManyWithWhereNestedInput {
  where?: WeChatUserScalarWhereInput
  data?: WeChatUserUpdateManyDataInput
}
export type WeChatUserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof WeChatUserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WeChatUserUpdateManyDataInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
}
export type WeChatUserUpdateManyDataInputInputObject =
  | Extract<keyof WeChatUserUpdateManyDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  
export interface ChatRoomUpsertWithWhereUniqueWithoutOwnerInput {
  where?: ChatRoomWhereUniqueInput
  update?: ChatRoomUpdateWithoutOwnerDataInput
  create?: ChatRoomCreateWithoutOwnerInput
}
export type ChatRoomUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof ChatRoomUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ChatRoomScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  nickname?: string | null
  nickname_not?: string | null
  nickname_in?: string[]
  nickname_not_in?: string[]
  nickname_lt?: string | null
  nickname_lte?: string | null
  nickname_gt?: string | null
  nickname_gte?: string | null
  nickname_contains?: string | null
  nickname_not_contains?: string | null
  nickname_starts_with?: string | null
  nickname_not_starts_with?: string | null
  nickname_ends_with?: string | null
  nickname_not_ends_with?: string | null
  displayName?: string | null
  displayName_not?: string | null
  displayName_in?: string[]
  displayName_not_in?: string[]
  displayName_lt?: string | null
  displayName_lte?: string | null
  displayName_gt?: string | null
  displayName_gte?: string | null
  displayName_contains?: string | null
  displayName_not_contains?: string | null
  displayName_starts_with?: string | null
  displayName_not_starts_with?: string | null
  displayName_ends_with?: string | null
  displayName_not_ends_with?: string | null
  modifyTime?: string | null
  modifyTime_not?: string | null
  modifyTime_in?: string[]
  modifyTime_not_in?: string[]
  modifyTime_lt?: string | null
  modifyTime_lte?: string | null
  modifyTime_gt?: string | null
  modifyTime_gte?: string | null
  AND?: ChatRoomScalarWhereInput[]
  OR?: ChatRoomScalarWhereInput[]
  NOT?: ChatRoomScalarWhereInput[]
}
export type ChatRoomScalarWhereInputInputObject =
  | Extract<keyof ChatRoomScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'nickname_not', alias?: string  } 
  | { name: 'nickname_in', alias?: string  } 
  | { name: 'nickname_not_in', alias?: string  } 
  | { name: 'nickname_lt', alias?: string  } 
  | { name: 'nickname_lte', alias?: string  } 
  | { name: 'nickname_gt', alias?: string  } 
  | { name: 'nickname_gte', alias?: string  } 
  | { name: 'nickname_contains', alias?: string  } 
  | { name: 'nickname_not_contains', alias?: string  } 
  | { name: 'nickname_starts_with', alias?: string  } 
  | { name: 'nickname_not_starts_with', alias?: string  } 
  | { name: 'nickname_ends_with', alias?: string  } 
  | { name: 'nickname_not_ends_with', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'displayName_not', alias?: string  } 
  | { name: 'displayName_in', alias?: string  } 
  | { name: 'displayName_not_in', alias?: string  } 
  | { name: 'displayName_lt', alias?: string  } 
  | { name: 'displayName_lte', alias?: string  } 
  | { name: 'displayName_gt', alias?: string  } 
  | { name: 'displayName_gte', alias?: string  } 
  | { name: 'displayName_contains', alias?: string  } 
  | { name: 'displayName_not_contains', alias?: string  } 
  | { name: 'displayName_starts_with', alias?: string  } 
  | { name: 'displayName_not_starts_with', alias?: string  } 
  | { name: 'displayName_ends_with', alias?: string  } 
  | { name: 'displayName_not_ends_with', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'modifyTime_not', alias?: string  } 
  | { name: 'modifyTime_in', alias?: string  } 
  | { name: 'modifyTime_not_in', alias?: string  } 
  | { name: 'modifyTime_lt', alias?: string  } 
  | { name: 'modifyTime_lte', alias?: string  } 
  | { name: 'modifyTime_gt', alias?: string  } 
  | { name: 'modifyTime_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ChatRoomUpdateManyWithWhereNestedInput {
  where?: ChatRoomScalarWhereInput
  data?: ChatRoomUpdateManyDataInput
}
export type ChatRoomUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ChatRoomUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ChatRoomUpdateManyDataInput {
  username?: string | null
  nickname?: string | null
  displayName?: string | null
  modifyTime?: string | null
}
export type ChatRoomUpdateManyDataInputInputObject =
  | Extract<keyof ChatRoomUpdateManyDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  
export interface WeChatUserUpsertWithoutMessageInput {
  update?: WeChatUserUpdateWithoutMessageDataInput
  create?: WeChatUserCreateWithoutMessageInput
}
export type WeChatUserUpsertWithoutMessageInputInputObject =
  | Extract<keyof WeChatUserUpsertWithoutMessageInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ContentUpdateOneInput {
  create?: ContentCreateInput | null
  update?: ContentUpdateDataInput | null
  upsert?: ContentUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentUpdateOneInputInputObject =
  | Extract<keyof ContentUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentUpdateDataInput {
  text?: TextUpdateOneWithoutContentInput | null
  image?: ImageUpdateOneWithoutContentInput | null
  voice?: VoiceUpdateOneWithoutContentInput | null
  video?: VideoUpdateOneWithoutContentInput | null
  file?: FileUpdateOneWithoutContentInput | null
  app?: AppUpdateOneWithoutContentInput | null
}
export type ContentUpdateDataInputInputObject =
  | Extract<keyof ContentUpdateDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface TextUpdateOneWithoutContentInput {
  create?: TextCreateWithoutContentInput | null
  update?: TextUpdateWithoutContentDataInput | null
  upsert?: TextUpsertWithoutContentInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TextWhereUniqueInput | null
}
export type TextUpdateOneWithoutContentInputInputObject =
  | Extract<keyof TextUpdateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TextUpdateWithoutContentDataInput {
  textMsg?: string | null
}
export type TextUpdateWithoutContentDataInputInputObject =
  | Extract<keyof TextUpdateWithoutContentDataInput, string>
  | { name: 'textMsg', alias?: string  } 
  
export interface TextUpsertWithoutContentInput {
  update?: TextUpdateWithoutContentDataInput
  create?: TextCreateWithoutContentInput
}
export type TextUpsertWithoutContentInputInputObject =
  | Extract<keyof TextUpsertWithoutContentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ImageUpdateOneWithoutContentInput {
  create?: ImageCreateWithoutContentInput | null
  update?: ImageUpdateWithoutContentDataInput | null
  upsert?: ImageUpsertWithoutContentInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ImageWhereUniqueInput | null
}
export type ImageUpdateOneWithoutContentInputInputObject =
  | Extract<keyof ImageUpdateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ImageUpdateWithoutContentDataInput {
  thumbnailImg?: FileIndexUpdateOneInput | null
  bigImg?: FileIndexUpdateOneInput | null
}
export type ImageUpdateWithoutContentDataInputInputObject =
  | Extract<keyof ImageUpdateWithoutContentDataInput, string>
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  
export interface ImageUpsertWithoutContentInput {
  update?: ImageUpdateWithoutContentDataInput
  create?: ImageCreateWithoutContentInput
}
export type ImageUpsertWithoutContentInputInputObject =
  | Extract<keyof ImageUpsertWithoutContentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VoiceUpdateOneWithoutContentInput {
  create?: VoiceCreateWithoutContentInput | null
  update?: VoiceUpdateWithoutContentDataInput | null
  upsert?: VoiceUpsertWithoutContentInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: VoiceWhereUniqueInput | null
}
export type VoiceUpdateOneWithoutContentInputInputObject =
  | Extract<keyof VoiceUpdateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VoiceUpdateWithoutContentDataInput {
  fileName?: FileIndexUpdateOneInput | null
  voiceLength?: number | null
}
export type VoiceUpdateWithoutContentDataInputInputObject =
  | Extract<keyof VoiceUpdateWithoutContentDataInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'voiceLength', alias?: string  } 
  
export interface VoiceUpsertWithoutContentInput {
  update?: VoiceUpdateWithoutContentDataInput
  create?: VoiceCreateWithoutContentInput
}
export type VoiceUpsertWithoutContentInputInputObject =
  | Extract<keyof VoiceUpsertWithoutContentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VideoUpdateOneWithoutContentInput {
  create?: VideoCreateWithoutContentInput | null
  update?: VideoUpdateWithoutContentDataInput | null
  upsert?: VideoUpsertWithoutContentInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: VideoWhereUniqueInput | null
}
export type VideoUpdateOneWithoutContentInputInputObject =
  | Extract<keyof VideoUpdateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VideoUpdateWithoutContentDataInput {
  fileName?: FileIndexUpdateOneInput | null
  thumbnailImg?: FileIndexUpdateOneInput | null
  videolength?: number | null
}
export type VideoUpdateWithoutContentDataInputInputObject =
  | Extract<keyof VideoUpdateWithoutContentDataInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'videolength', alias?: string  } 
  
export interface VideoUpsertWithoutContentInput {
  update?: VideoUpdateWithoutContentDataInput
  create?: VideoCreateWithoutContentInput
}
export type VideoUpsertWithoutContentInputInputObject =
  | Extract<keyof VideoUpsertWithoutContentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FileUpdateOneWithoutContentInput {
  create?: FileCreateWithoutContentInput | null
  update?: FileUpdateWithoutContentDataInput | null
  upsert?: FileUpsertWithoutContentInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: FileWhereUniqueInput | null
}
export type FileUpdateOneWithoutContentInputInputObject =
  | Extract<keyof FileUpdateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FileUpdateWithoutContentDataInput {
  fileName?: FileIndexUpdateOneInput | null
  size?: number | null
}
export type FileUpdateWithoutContentDataInputInputObject =
  | Extract<keyof FileUpdateWithoutContentDataInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'size', alias?: string  } 
  
export interface FileUpsertWithoutContentInput {
  update?: FileUpdateWithoutContentDataInput
  create?: FileCreateWithoutContentInput
}
export type FileUpsertWithoutContentInputInputObject =
  | Extract<keyof FileUpsertWithoutContentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AppUpdateOneWithoutContentInput {
  create?: AppCreateWithoutContentInput | null
  update?: AppUpdateWithoutContentDataInput | null
  upsert?: AppUpsertWithoutContentInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AppWhereUniqueInput | null
}
export type AppUpdateOneWithoutContentInputInputObject =
  | Extract<keyof AppUpdateOneWithoutContentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AppUpdateWithoutContentDataInput {
  xml?: undefined | null
}
export type AppUpdateWithoutContentDataInputInputObject =
  | Extract<keyof AppUpdateWithoutContentDataInput, string>
  | { name: 'xml', alias?: string  } 
  
export interface AppUpsertWithoutContentInput {
  update?: AppUpdateWithoutContentDataInput
  create?: AppCreateWithoutContentInput
}
export type AppUpsertWithoutContentInputInputObject =
  | Extract<keyof AppUpsertWithoutContentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ContentUpsertNestedInput {
  update?: ContentUpdateDataInput
  create?: ContentCreateInput
}
export type ContentUpsertNestedInputInputObject =
  | Extract<keyof ContentUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MessageUpsertWithWhereUniqueWithoutChatRoomInput {
  where?: MessageWhereUniqueInput
  update?: MessageUpdateWithoutChatRoomDataInput
  create?: MessageCreateWithoutChatRoomInput
}
export type MessageUpsertWithWhereUniqueWithoutChatRoomInputInputObject =
  | Extract<keyof MessageUpsertWithWhereUniqueWithoutChatRoomInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MessageScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  msgSvrId?: string | null
  msgSvrId_not?: string | null
  msgSvrId_in?: string[]
  msgSvrId_not_in?: string[]
  msgSvrId_lt?: string | null
  msgSvrId_lte?: string | null
  msgSvrId_gt?: string | null
  msgSvrId_gte?: string | null
  msgSvrId_contains?: string | null
  msgSvrId_not_contains?: string | null
  msgSvrId_starts_with?: string | null
  msgSvrId_not_starts_with?: string | null
  msgSvrId_ends_with?: string | null
  msgSvrId_not_ends_with?: string | null
  isSend?: number | null
  isSend_not?: number | null
  isSend_in?: number[]
  isSend_not_in?: number[]
  isSend_lt?: number | null
  isSend_lte?: number | null
  isSend_gt?: number | null
  isSend_gte?: number | null
  type?: number | null
  type_not?: number | null
  type_in?: number[]
  type_not_in?: number[]
  type_lt?: number | null
  type_lte?: number | null
  type_gt?: number | null
  type_gte?: number | null
  createTime?: string | null
  createTime_not?: string | null
  createTime_in?: string[]
  createTime_not_in?: string[]
  createTime_lt?: string | null
  createTime_lte?: string | null
  createTime_gt?: string | null
  createTime_gte?: string | null
  AND?: MessageScalarWhereInput[]
  OR?: MessageScalarWhereInput[]
  NOT?: MessageScalarWhereInput[]
}
export type MessageScalarWhereInputInputObject =
  | Extract<keyof MessageScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'msgSvrId_not', alias?: string  } 
  | { name: 'msgSvrId_in', alias?: string  } 
  | { name: 'msgSvrId_not_in', alias?: string  } 
  | { name: 'msgSvrId_lt', alias?: string  } 
  | { name: 'msgSvrId_lte', alias?: string  } 
  | { name: 'msgSvrId_gt', alias?: string  } 
  | { name: 'msgSvrId_gte', alias?: string  } 
  | { name: 'msgSvrId_contains', alias?: string  } 
  | { name: 'msgSvrId_not_contains', alias?: string  } 
  | { name: 'msgSvrId_starts_with', alias?: string  } 
  | { name: 'msgSvrId_not_starts_with', alias?: string  } 
  | { name: 'msgSvrId_ends_with', alias?: string  } 
  | { name: 'msgSvrId_not_ends_with', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'isSend_not', alias?: string  } 
  | { name: 'isSend_in', alias?: string  } 
  | { name: 'isSend_not_in', alias?: string  } 
  | { name: 'isSend_lt', alias?: string  } 
  | { name: 'isSend_lte', alias?: string  } 
  | { name: 'isSend_gt', alias?: string  } 
  | { name: 'isSend_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'createTime_not', alias?: string  } 
  | { name: 'createTime_in', alias?: string  } 
  | { name: 'createTime_not_in', alias?: string  } 
  | { name: 'createTime_lt', alias?: string  } 
  | { name: 'createTime_lte', alias?: string  } 
  | { name: 'createTime_gt', alias?: string  } 
  | { name: 'createTime_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MessageUpdateManyWithWhereNestedInput {
  where?: MessageScalarWhereInput
  data?: MessageUpdateManyDataInput
}
export type MessageUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof MessageUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MessageUpdateManyDataInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  createTime?: string | null
}
export type MessageUpdateManyDataInputInputObject =
  | Extract<keyof MessageUpdateManyDataInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  
export interface ChatRoomUpsertWithWhereUniqueWithoutMemberListInput {
  where?: ChatRoomWhereUniqueInput
  update?: ChatRoomUpdateWithoutMemberListDataInput
  create?: ChatRoomCreateWithoutMemberListInput
}
export type ChatRoomUpsertWithWhereUniqueWithoutMemberListInputInputObject =
  | Extract<keyof ChatRoomUpsertWithWhereUniqueWithoutMemberListInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WeChatUserUpsertWithoutHaveChatRoomInput {
  update?: WeChatUserUpdateWithoutHaveChatRoomDataInput
  create?: WeChatUserCreateWithoutHaveChatRoomInput
}
export type WeChatUserUpsertWithoutHaveChatRoomInputInputObject =
  | Extract<keyof WeChatUserUpsertWithoutHaveChatRoomInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ChatRoomUpsertWithoutMessageInput {
  update?: ChatRoomUpdateWithoutMessageDataInput
  create?: ChatRoomCreateWithoutMessageInput
}
export type ChatRoomUpsertWithoutMessageInputInputObject =
  | Extract<keyof ChatRoomUpsertWithoutMessageInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MessageUpsertWithWhereUniqueWithoutTalkerInput {
  where?: MessageWhereUniqueInput
  update?: MessageUpdateWithoutTalkerDataInput
  create?: MessageCreateWithoutTalkerInput
}
export type MessageUpsertWithWhereUniqueWithoutTalkerInputInputObject =
  | Extract<keyof MessageUpsertWithWhereUniqueWithoutTalkerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WeChatUserUpsertNestedInput {
  update?: WeChatUserUpdateDataInput
  create?: WeChatUserCreateInput
}
export type WeChatUserUpsertNestedInputInputObject =
  | Extract<keyof WeChatUserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WeChatUserUpdateManyInput {
  create?: WeChatUserCreateInput[]
  update?: WeChatUserUpdateWithWhereUniqueNestedInput[]
  upsert?: WeChatUserUpsertWithWhereUniqueNestedInput[]
  delete?: WeChatUserWhereUniqueInput[]
  connect?: WeChatUserWhereUniqueInput[]
  set?: WeChatUserWhereUniqueInput[]
  disconnect?: WeChatUserWhereUniqueInput[]
  deleteMany?: WeChatUserScalarWhereInput[]
  updateMany?: WeChatUserUpdateManyWithWhereNestedInput[]
}
export type WeChatUserUpdateManyInputInputObject =
  | Extract<keyof WeChatUserUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface WeChatUserUpdateWithWhereUniqueNestedInput {
  where?: WeChatUserWhereUniqueInput
  data?: WeChatUserUpdateDataInput
}
export type WeChatUserUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof WeChatUserUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WeChatUserUpsertWithWhereUniqueNestedInput {
  where?: WeChatUserWhereUniqueInput
  update?: WeChatUserUpdateDataInput
  create?: WeChatUserCreateInput
}
export type WeChatUserUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof WeChatUserUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ChatRoomUpdateManyInput {
  create?: ChatRoomCreateInput[]
  update?: ChatRoomUpdateWithWhereUniqueNestedInput[]
  upsert?: ChatRoomUpsertWithWhereUniqueNestedInput[]
  delete?: ChatRoomWhereUniqueInput[]
  connect?: ChatRoomWhereUniqueInput[]
  set?: ChatRoomWhereUniqueInput[]
  disconnect?: ChatRoomWhereUniqueInput[]
  deleteMany?: ChatRoomScalarWhereInput[]
  updateMany?: ChatRoomUpdateManyWithWhereNestedInput[]
}
export type ChatRoomUpdateManyInputInputObject =
  | Extract<keyof ChatRoomUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ChatRoomUpdateWithWhereUniqueNestedInput {
  where?: ChatRoomWhereUniqueInput
  data?: ChatRoomUpdateDataInput
}
export type ChatRoomUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ChatRoomUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ChatRoomUpdateDataInput {
  username?: string | null
  nickname?: string | null
  displayName?: string | null
  owner?: WeChatUserUpdateOneRequiredWithoutHaveChatRoomInput | null
  memberList?: WeChatUserUpdateManyWithoutJoinChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutChatRoomInput | null
}
export type ChatRoomUpdateDataInputInputObject =
  | Extract<keyof ChatRoomUpdateDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'memberList', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface ChatRoomUpsertWithWhereUniqueNestedInput {
  where?: ChatRoomWhereUniqueInput
  update?: ChatRoomUpdateDataInput
  create?: ChatRoomCreateInput
}
export type ChatRoomUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ChatRoomUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MessageUpdateManyInput {
  create?: MessageCreateInput[]
  update?: MessageUpdateWithWhereUniqueNestedInput[]
  upsert?: MessageUpsertWithWhereUniqueNestedInput[]
  delete?: MessageWhereUniqueInput[]
  connect?: MessageWhereUniqueInput[]
  set?: MessageWhereUniqueInput[]
  disconnect?: MessageWhereUniqueInput[]
  deleteMany?: MessageScalarWhereInput[]
  updateMany?: MessageUpdateManyWithWhereNestedInput[]
}
export type MessageUpdateManyInputInputObject =
  | Extract<keyof MessageUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MessageUpdateWithWhereUniqueNestedInput {
  where?: MessageWhereUniqueInput
  data?: MessageUpdateDataInput
}
export type MessageUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof MessageUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MessageUpdateDataInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  talker?: WeChatUserUpdateOneRequiredWithoutMessageInput | null
  createTime?: string | null
  chatRoom?: ChatRoomUpdateOneWithoutMessageInput | null
  content?: ContentUpdateOneInput | null
}
export type MessageUpdateDataInputInputObject =
  | Extract<keyof MessageUpdateDataInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'talker', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'chatRoom', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface MessageUpsertWithWhereUniqueNestedInput {
  where?: MessageWhereUniqueInput
  update?: MessageUpdateDataInput
  create?: MessageCreateInput
}
export type MessageUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof MessageUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WeChatUpsertWithWhereUniqueNestedInput {
  where?: WeChatWhereUniqueInput
  update?: WeChatUpdateDataInput
  create?: WeChatCreateInput
}
export type WeChatUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof WeChatUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WeChatScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  AND?: WeChatScalarWhereInput[]
  OR?: WeChatScalarWhereInput[]
  NOT?: WeChatScalarWhereInput[]
}
export type WeChatScalarWhereInputInputObject =
  | Extract<keyof WeChatScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface WeChatUpdateInput {
  weChatOwner?: WeChatUserUpdateOneRequiredInput | null
  weChatUsers?: WeChatUserUpdateManyInput | null
  chatRooms?: ChatRoomUpdateManyInput | null
  messages?: MessageUpdateManyInput | null
}
export type WeChatUpdateInputInputObject =
  | Extract<keyof WeChatUpdateInput, string>
  | { name: 'weChatOwner', alias?: string  } 
  | { name: 'weChatUsers', alias?: string  } 
  | { name: 'chatRooms', alias?: string  } 
  | { name: 'messages', alias?: string  } 
  
export interface WeChatUserUpdateInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutTalkerInput | null
  haveChatRoom?: ChatRoomUpdateManyWithoutOwnerInput | null
  joinChatRoom?: ChatRoomUpdateManyWithoutMemberListInput | null
  contact?: ContactUpdateOneWithoutWeChatUserInput | null
}
export type WeChatUserUpdateInputInputObject =
  | Extract<keyof WeChatUserUpdateInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  | { name: 'contact', alias?: string  } 
  
export interface WeChatUserUpdateManyMutationInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
}
export type WeChatUserUpdateManyMutationInputInputObject =
  | Extract<keyof WeChatUserUpdateManyMutationInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  
export interface ChatRoomUpdateInput {
  username?: string | null
  nickname?: string | null
  displayName?: string | null
  owner?: WeChatUserUpdateOneRequiredWithoutHaveChatRoomInput | null
  memberList?: WeChatUserUpdateManyWithoutJoinChatRoomInput | null
  modifyTime?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutChatRoomInput | null
}
export type ChatRoomUpdateInputInputObject =
  | Extract<keyof ChatRoomUpdateInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'memberList', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  
export interface ChatRoomUpdateManyMutationInput {
  username?: string | null
  nickname?: string | null
  displayName?: string | null
  modifyTime?: string | null
}
export type ChatRoomUpdateManyMutationInputInputObject =
  | Extract<keyof ChatRoomUpdateManyMutationInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'modifyTime', alias?: string  } 
  
export interface AvatarUpdateInput {
  thumbnailImg?: FileIndexUpdateOneInput | null
  bigImg?: FileIndexUpdateOneInput | null
}
export type AvatarUpdateInputInputObject =
  | Extract<keyof AvatarUpdateInput, string>
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  
export interface ContactCreateInput {
  type?: string
  weChatUser?: WeChatUserCreateManyWithoutContactInput | null
}
export type ContactCreateInputInputObject =
  | Extract<keyof ContactCreateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'weChatUser', alias?: string  } 
  
export interface WeChatUserCreateManyWithoutContactInput {
  create?: WeChatUserCreateWithoutContactInput[]
  connect?: WeChatUserWhereUniqueInput[]
}
export type WeChatUserCreateManyWithoutContactInputInputObject =
  | Extract<keyof WeChatUserCreateManyWithoutContactInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WeChatUserCreateWithoutContactInput {
  username?: string
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarCreateOneInput | null
  message?: MessageCreateManyWithoutTalkerInput | null
  haveChatRoom?: ChatRoomCreateManyWithoutOwnerInput | null
  joinChatRoom?: ChatRoomCreateManyWithoutMemberListInput | null
}
export type WeChatUserCreateWithoutContactInputInputObject =
  | Extract<keyof WeChatUserCreateWithoutContactInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  
export interface ContactUpdateInput {
  type?: string | null
  weChatUser?: WeChatUserUpdateManyWithoutContactInput | null
}
export type ContactUpdateInputInputObject =
  | Extract<keyof ContactUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'weChatUser', alias?: string  } 
  
export interface WeChatUserUpdateManyWithoutContactInput {
  create?: WeChatUserCreateWithoutContactInput[]
  delete?: WeChatUserWhereUniqueInput[]
  connect?: WeChatUserWhereUniqueInput[]
  set?: WeChatUserWhereUniqueInput[]
  disconnect?: WeChatUserWhereUniqueInput[]
  update?: WeChatUserUpdateWithWhereUniqueWithoutContactInput[]
  upsert?: WeChatUserUpsertWithWhereUniqueWithoutContactInput[]
  deleteMany?: WeChatUserScalarWhereInput[]
  updateMany?: WeChatUserUpdateManyWithWhereNestedInput[]
}
export type WeChatUserUpdateManyWithoutContactInputInputObject =
  | Extract<keyof WeChatUserUpdateManyWithoutContactInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface WeChatUserUpdateWithWhereUniqueWithoutContactInput {
  where?: WeChatUserWhereUniqueInput
  data?: WeChatUserUpdateWithoutContactDataInput
}
export type WeChatUserUpdateWithWhereUniqueWithoutContactInputInputObject =
  | Extract<keyof WeChatUserUpdateWithWhereUniqueWithoutContactInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WeChatUserUpdateWithoutContactDataInput {
  username?: string | null
  alias?: string | null
  conRemark?: string | null
  nickname?: string | null
  avatar?: AvatarUpdateOneInput | null
  message?: MessageUpdateManyWithoutTalkerInput | null
  haveChatRoom?: ChatRoomUpdateManyWithoutOwnerInput | null
  joinChatRoom?: ChatRoomUpdateManyWithoutMemberListInput | null
}
export type WeChatUserUpdateWithoutContactDataInputInputObject =
  | Extract<keyof WeChatUserUpdateWithoutContactDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'alias', alias?: string  } 
  | { name: 'conRemark', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'message', alias?: string  } 
  | { name: 'haveChatRoom', alias?: string  } 
  | { name: 'joinChatRoom', alias?: string  } 
  
export interface WeChatUserUpsertWithWhereUniqueWithoutContactInput {
  where?: WeChatUserWhereUniqueInput
  update?: WeChatUserUpdateWithoutContactDataInput
  create?: WeChatUserCreateWithoutContactInput
}
export type WeChatUserUpsertWithWhereUniqueWithoutContactInputInputObject =
  | Extract<keyof WeChatUserUpsertWithWhereUniqueWithoutContactInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ContactUpdateManyMutationInput {
  type?: string | null
}
export type ContactUpdateManyMutationInputInputObject =
  | Extract<keyof ContactUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  
export interface MessageUpdateInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  talker?: WeChatUserUpdateOneRequiredWithoutMessageInput | null
  createTime?: string | null
  chatRoom?: ChatRoomUpdateOneWithoutMessageInput | null
  content?: ContentUpdateOneInput | null
}
export type MessageUpdateInputInputObject =
  | Extract<keyof MessageUpdateInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'talker', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  | { name: 'chatRoom', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface MessageUpdateManyMutationInput {
  msgSvrId?: string | null
  isSend?: number | null
  type?: number | null
  createTime?: string | null
}
export type MessageUpdateManyMutationInputInputObject =
  | Extract<keyof MessageUpdateManyMutationInput, string>
  | { name: 'msgSvrId', alias?: string  } 
  | { name: 'isSend', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'createTime', alias?: string  } 
  
export interface ContentUpdateInput {
  text?: TextUpdateOneWithoutContentInput | null
  image?: ImageUpdateOneWithoutContentInput | null
  voice?: VoiceUpdateOneWithoutContentInput | null
  video?: VideoUpdateOneWithoutContentInput | null
  file?: FileUpdateOneWithoutContentInput | null
  app?: AppUpdateOneWithoutContentInput | null
}
export type ContentUpdateInputInputObject =
  | Extract<keyof ContentUpdateInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface TextCreateInput {
  textMsg?: string
  content?: ContentCreateOneWithoutTextInput | null
}
export type TextCreateInputInputObject =
  | Extract<keyof TextCreateInput, string>
  | { name: 'textMsg', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentCreateOneWithoutTextInput {
  create?: ContentCreateWithoutTextInput | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentCreateOneWithoutTextInputInputObject =
  | Extract<keyof ContentCreateOneWithoutTextInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentCreateWithoutTextInput {
  image?: ImageCreateOneWithoutContentInput | null
  voice?: VoiceCreateOneWithoutContentInput | null
  video?: VideoCreateOneWithoutContentInput | null
  file?: FileCreateOneWithoutContentInput | null
  app?: AppCreateOneWithoutContentInput | null
}
export type ContentCreateWithoutTextInputInputObject =
  | Extract<keyof ContentCreateWithoutTextInput, string>
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface TextUpdateInput {
  textMsg?: string | null
  content?: ContentUpdateOneWithoutTextInput | null
}
export type TextUpdateInputInputObject =
  | Extract<keyof TextUpdateInput, string>
  | { name: 'textMsg', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentUpdateOneWithoutTextInput {
  create?: ContentCreateWithoutTextInput | null
  update?: ContentUpdateWithoutTextDataInput | null
  upsert?: ContentUpsertWithoutTextInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentUpdateOneWithoutTextInputInputObject =
  | Extract<keyof ContentUpdateOneWithoutTextInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentUpdateWithoutTextDataInput {
  image?: ImageUpdateOneWithoutContentInput | null
  voice?: VoiceUpdateOneWithoutContentInput | null
  video?: VideoUpdateOneWithoutContentInput | null
  file?: FileUpdateOneWithoutContentInput | null
  app?: AppUpdateOneWithoutContentInput | null
}
export type ContentUpdateWithoutTextDataInputInputObject =
  | Extract<keyof ContentUpdateWithoutTextDataInput, string>
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface ContentUpsertWithoutTextInput {
  update?: ContentUpdateWithoutTextDataInput
  create?: ContentCreateWithoutTextInput
}
export type ContentUpsertWithoutTextInputInputObject =
  | Extract<keyof ContentUpsertWithoutTextInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TextUpdateManyMutationInput {
  textMsg?: string | null
}
export type TextUpdateManyMutationInputInputObject =
  | Extract<keyof TextUpdateManyMutationInput, string>
  | { name: 'textMsg', alias?: string  } 
  
export interface ImageCreateInput {
  thumbnailImg?: FileIndexCreateOneInput | null
  bigImg?: FileIndexCreateOneInput | null
  content?: ContentCreateOneWithoutImageInput | null
}
export type ImageCreateInputInputObject =
  | Extract<keyof ImageCreateInput, string>
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentCreateOneWithoutImageInput {
  create?: ContentCreateWithoutImageInput | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentCreateOneWithoutImageInputInputObject =
  | Extract<keyof ContentCreateOneWithoutImageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentCreateWithoutImageInput {
  text?: TextCreateOneWithoutContentInput | null
  voice?: VoiceCreateOneWithoutContentInput | null
  video?: VideoCreateOneWithoutContentInput | null
  file?: FileCreateOneWithoutContentInput | null
  app?: AppCreateOneWithoutContentInput | null
}
export type ContentCreateWithoutImageInputInputObject =
  | Extract<keyof ContentCreateWithoutImageInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface ImageUpdateInput {
  thumbnailImg?: FileIndexUpdateOneInput | null
  bigImg?: FileIndexUpdateOneInput | null
  content?: ContentUpdateOneWithoutImageInput | null
}
export type ImageUpdateInputInputObject =
  | Extract<keyof ImageUpdateInput, string>
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'bigImg', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentUpdateOneWithoutImageInput {
  create?: ContentCreateWithoutImageInput | null
  update?: ContentUpdateWithoutImageDataInput | null
  upsert?: ContentUpsertWithoutImageInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentUpdateOneWithoutImageInputInputObject =
  | Extract<keyof ContentUpdateOneWithoutImageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentUpdateWithoutImageDataInput {
  text?: TextUpdateOneWithoutContentInput | null
  voice?: VoiceUpdateOneWithoutContentInput | null
  video?: VideoUpdateOneWithoutContentInput | null
  file?: FileUpdateOneWithoutContentInput | null
  app?: AppUpdateOneWithoutContentInput | null
}
export type ContentUpdateWithoutImageDataInputInputObject =
  | Extract<keyof ContentUpdateWithoutImageDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface ContentUpsertWithoutImageInput {
  update?: ContentUpdateWithoutImageDataInput
  create?: ContentCreateWithoutImageInput
}
export type ContentUpsertWithoutImageInputInputObject =
  | Extract<keyof ContentUpsertWithoutImageInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VoiceCreateInput {
  fileName?: FileIndexCreateOneInput | null
  voiceLength?: number | null
  content?: ContentCreateOneWithoutVoiceInput | null
}
export type VoiceCreateInputInputObject =
  | Extract<keyof VoiceCreateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'voiceLength', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentCreateOneWithoutVoiceInput {
  create?: ContentCreateWithoutVoiceInput | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentCreateOneWithoutVoiceInputInputObject =
  | Extract<keyof ContentCreateOneWithoutVoiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentCreateWithoutVoiceInput {
  text?: TextCreateOneWithoutContentInput | null
  image?: ImageCreateOneWithoutContentInput | null
  video?: VideoCreateOneWithoutContentInput | null
  file?: FileCreateOneWithoutContentInput | null
  app?: AppCreateOneWithoutContentInput | null
}
export type ContentCreateWithoutVoiceInputInputObject =
  | Extract<keyof ContentCreateWithoutVoiceInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface VoiceUpdateInput {
  fileName?: FileIndexUpdateOneInput | null
  voiceLength?: number | null
  content?: ContentUpdateOneWithoutVoiceInput | null
}
export type VoiceUpdateInputInputObject =
  | Extract<keyof VoiceUpdateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'voiceLength', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentUpdateOneWithoutVoiceInput {
  create?: ContentCreateWithoutVoiceInput | null
  update?: ContentUpdateWithoutVoiceDataInput | null
  upsert?: ContentUpsertWithoutVoiceInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentUpdateOneWithoutVoiceInputInputObject =
  | Extract<keyof ContentUpdateOneWithoutVoiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentUpdateWithoutVoiceDataInput {
  text?: TextUpdateOneWithoutContentInput | null
  image?: ImageUpdateOneWithoutContentInput | null
  video?: VideoUpdateOneWithoutContentInput | null
  file?: FileUpdateOneWithoutContentInput | null
  app?: AppUpdateOneWithoutContentInput | null
}
export type ContentUpdateWithoutVoiceDataInputInputObject =
  | Extract<keyof ContentUpdateWithoutVoiceDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface ContentUpsertWithoutVoiceInput {
  update?: ContentUpdateWithoutVoiceDataInput
  create?: ContentCreateWithoutVoiceInput
}
export type ContentUpsertWithoutVoiceInputInputObject =
  | Extract<keyof ContentUpsertWithoutVoiceInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VoiceUpdateManyMutationInput {
  voiceLength?: number | null
}
export type VoiceUpdateManyMutationInputInputObject =
  | Extract<keyof VoiceUpdateManyMutationInput, string>
  | { name: 'voiceLength', alias?: string  } 
  
export interface VideoCreateInput {
  fileName?: FileIndexCreateOneInput | null
  thumbnailImg?: FileIndexCreateOneInput | null
  videolength?: number | null
  content?: ContentCreateOneWithoutVideoInput | null
}
export type VideoCreateInputInputObject =
  | Extract<keyof VideoCreateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'videolength', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentCreateOneWithoutVideoInput {
  create?: ContentCreateWithoutVideoInput | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentCreateOneWithoutVideoInputInputObject =
  | Extract<keyof ContentCreateOneWithoutVideoInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentCreateWithoutVideoInput {
  text?: TextCreateOneWithoutContentInput | null
  image?: ImageCreateOneWithoutContentInput | null
  voice?: VoiceCreateOneWithoutContentInput | null
  file?: FileCreateOneWithoutContentInput | null
  app?: AppCreateOneWithoutContentInput | null
}
export type ContentCreateWithoutVideoInputInputObject =
  | Extract<keyof ContentCreateWithoutVideoInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface VideoUpdateInput {
  fileName?: FileIndexUpdateOneInput | null
  thumbnailImg?: FileIndexUpdateOneInput | null
  videolength?: number | null
  content?: ContentUpdateOneWithoutVideoInput | null
}
export type VideoUpdateInputInputObject =
  | Extract<keyof VideoUpdateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'thumbnailImg', alias?: string  } 
  | { name: 'videolength', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentUpdateOneWithoutVideoInput {
  create?: ContentCreateWithoutVideoInput | null
  update?: ContentUpdateWithoutVideoDataInput | null
  upsert?: ContentUpsertWithoutVideoInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentUpdateOneWithoutVideoInputInputObject =
  | Extract<keyof ContentUpdateOneWithoutVideoInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentUpdateWithoutVideoDataInput {
  text?: TextUpdateOneWithoutContentInput | null
  image?: ImageUpdateOneWithoutContentInput | null
  voice?: VoiceUpdateOneWithoutContentInput | null
  file?: FileUpdateOneWithoutContentInput | null
  app?: AppUpdateOneWithoutContentInput | null
}
export type ContentUpdateWithoutVideoDataInputInputObject =
  | Extract<keyof ContentUpdateWithoutVideoDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'file', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface ContentUpsertWithoutVideoInput {
  update?: ContentUpdateWithoutVideoDataInput
  create?: ContentCreateWithoutVideoInput
}
export type ContentUpsertWithoutVideoInputInputObject =
  | Extract<keyof ContentUpsertWithoutVideoInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VideoUpdateManyMutationInput {
  videolength?: number | null
}
export type VideoUpdateManyMutationInputInputObject =
  | Extract<keyof VideoUpdateManyMutationInput, string>
  | { name: 'videolength', alias?: string  } 
  
export interface FileCreateInput {
  fileName?: FileIndexCreateOneInput | null
  size?: number | null
  content?: ContentCreateOneWithoutFileInput | null
}
export type FileCreateInputInputObject =
  | Extract<keyof FileCreateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentCreateOneWithoutFileInput {
  create?: ContentCreateWithoutFileInput | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentCreateOneWithoutFileInputInputObject =
  | Extract<keyof ContentCreateOneWithoutFileInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentCreateWithoutFileInput {
  text?: TextCreateOneWithoutContentInput | null
  image?: ImageCreateOneWithoutContentInput | null
  voice?: VoiceCreateOneWithoutContentInput | null
  video?: VideoCreateOneWithoutContentInput | null
  app?: AppCreateOneWithoutContentInput | null
}
export type ContentCreateWithoutFileInputInputObject =
  | Extract<keyof ContentCreateWithoutFileInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface FileUpdateInput {
  fileName?: FileIndexUpdateOneInput | null
  size?: number | null
  content?: ContentUpdateOneWithoutFileInput | null
}
export type FileUpdateInputInputObject =
  | Extract<keyof FileUpdateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentUpdateOneWithoutFileInput {
  create?: ContentCreateWithoutFileInput | null
  update?: ContentUpdateWithoutFileDataInput | null
  upsert?: ContentUpsertWithoutFileInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentUpdateOneWithoutFileInputInputObject =
  | Extract<keyof ContentUpdateOneWithoutFileInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentUpdateWithoutFileDataInput {
  text?: TextUpdateOneWithoutContentInput | null
  image?: ImageUpdateOneWithoutContentInput | null
  voice?: VoiceUpdateOneWithoutContentInput | null
  video?: VideoUpdateOneWithoutContentInput | null
  app?: AppUpdateOneWithoutContentInput | null
}
export type ContentUpdateWithoutFileDataInputInputObject =
  | Extract<keyof ContentUpdateWithoutFileDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'app', alias?: string  } 
  
export interface ContentUpsertWithoutFileInput {
  update?: ContentUpdateWithoutFileDataInput
  create?: ContentCreateWithoutFileInput
}
export type ContentUpsertWithoutFileInputInputObject =
  | Extract<keyof ContentUpsertWithoutFileInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FileUpdateManyMutationInput {
  size?: number | null
}
export type FileUpdateManyMutationInputInputObject =
  | Extract<keyof FileUpdateManyMutationInput, string>
  | { name: 'size', alias?: string  } 
  
export interface AppCreateInput {
  xml?: undefined | null
  content?: ContentCreateOneWithoutAppInput | null
}
export type AppCreateInputInputObject =
  | Extract<keyof AppCreateInput, string>
  | { name: 'xml', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentCreateOneWithoutAppInput {
  create?: ContentCreateWithoutAppInput | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentCreateOneWithoutAppInputInputObject =
  | Extract<keyof ContentCreateOneWithoutAppInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentCreateWithoutAppInput {
  text?: TextCreateOneWithoutContentInput | null
  image?: ImageCreateOneWithoutContentInput | null
  voice?: VoiceCreateOneWithoutContentInput | null
  video?: VideoCreateOneWithoutContentInput | null
  file?: FileCreateOneWithoutContentInput | null
}
export type ContentCreateWithoutAppInputInputObject =
  | Extract<keyof ContentCreateWithoutAppInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  
export interface AppUpdateInput {
  xml?: undefined | null
  content?: ContentUpdateOneWithoutAppInput | null
}
export type AppUpdateInputInputObject =
  | Extract<keyof AppUpdateInput, string>
  | { name: 'xml', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface ContentUpdateOneWithoutAppInput {
  create?: ContentCreateWithoutAppInput | null
  update?: ContentUpdateWithoutAppDataInput | null
  upsert?: ContentUpsertWithoutAppInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ContentWhereUniqueInput | null
}
export type ContentUpdateOneWithoutAppInputInputObject =
  | Extract<keyof ContentUpdateOneWithoutAppInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContentUpdateWithoutAppDataInput {
  text?: TextUpdateOneWithoutContentInput | null
  image?: ImageUpdateOneWithoutContentInput | null
  voice?: VoiceUpdateOneWithoutContentInput | null
  video?: VideoUpdateOneWithoutContentInput | null
  file?: FileUpdateOneWithoutContentInput | null
}
export type ContentUpdateWithoutAppDataInputInputObject =
  | Extract<keyof ContentUpdateWithoutAppDataInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'voice', alias?: string  } 
  | { name: 'video', alias?: string  } 
  | { name: 'file', alias?: string  } 
  
export interface ContentUpsertWithoutAppInput {
  update?: ContentUpdateWithoutAppDataInput
  create?: ContentCreateWithoutAppInput
}
export type ContentUpsertWithoutAppInputInputObject =
  | Extract<keyof ContentUpsertWithoutAppInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AppUpdateManyMutationInput {
  xml?: undefined | null
}
export type AppUpdateManyMutationInputInputObject =
  | Extract<keyof AppUpdateManyMutationInput, string>
  | { name: 'xml', alias?: string  } 
  
export interface FileIndexUpdateInput {
  fileName?: string | null
  mimetype?: string | null
  size?: number | null
  url?: string | null
}
export type FileIndexUpdateInputInputObject =
  | Extract<keyof FileIndexUpdateInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface FileIndexUpdateManyMutationInput {
  fileName?: string | null
  mimetype?: string | null
  size?: number | null
  url?: string | null
}
export type FileIndexUpdateManyMutationInputInputObject =
  | Extract<keyof FileIndexUpdateManyMutationInput, string>
  | { name: 'fileName', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface WeChatSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: WeChatWhereInput | null
  AND?: WeChatSubscriptionWhereInput[]
}
export type WeChatSubscriptionWhereInputInputObject =
  | Extract<keyof WeChatSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface WeChatUserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: WeChatUserWhereInput | null
  AND?: WeChatUserSubscriptionWhereInput[]
}
export type WeChatUserSubscriptionWhereInputInputObject =
  | Extract<keyof WeChatUserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ChatRoomSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ChatRoomWhereInput | null
  AND?: ChatRoomSubscriptionWhereInput[]
}
export type ChatRoomSubscriptionWhereInputInputObject =
  | Extract<keyof ChatRoomSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AvatarSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AvatarWhereInput | null
  AND?: AvatarSubscriptionWhereInput[]
}
export type AvatarSubscriptionWhereInputInputObject =
  | Extract<keyof AvatarSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ContactSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ContactWhereInput | null
  AND?: ContactSubscriptionWhereInput[]
}
export type ContactSubscriptionWhereInputInputObject =
  | Extract<keyof ContactSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MessageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MessageWhereInput | null
  AND?: MessageSubscriptionWhereInput[]
}
export type MessageSubscriptionWhereInputInputObject =
  | Extract<keyof MessageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ContentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ContentWhereInput | null
  AND?: ContentSubscriptionWhereInput[]
}
export type ContentSubscriptionWhereInputInputObject =
  | Extract<keyof ContentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface TextSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TextWhereInput | null
  AND?: TextSubscriptionWhereInput[]
}
export type TextSubscriptionWhereInputInputObject =
  | Extract<keyof TextSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ImageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ImageWhereInput | null
  AND?: ImageSubscriptionWhereInput[]
}
export type ImageSubscriptionWhereInputInputObject =
  | Extract<keyof ImageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface VoiceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VoiceWhereInput | null
  AND?: VoiceSubscriptionWhereInput[]
}
export type VoiceSubscriptionWhereInputInputObject =
  | Extract<keyof VoiceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface VideoSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VideoWhereInput | null
  AND?: VideoSubscriptionWhereInput[]
}
export type VideoSubscriptionWhereInputInputObject =
  | Extract<keyof VideoSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface FileSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FileWhereInput | null
  AND?: FileSubscriptionWhereInput[]
}
export type FileSubscriptionWhereInputInputObject =
  | Extract<keyof FileSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface AppSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AppWhereInput | null
  AND?: AppSubscriptionWhereInput[]
}
export type AppSubscriptionWhereInputInputObject =
  | Extract<keyof AppSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface FileIndexSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FileIndexWhereInput | null
  AND?: FileIndexSubscriptionWhereInput[]
}
export type FileIndexSubscriptionWhereInputInputObject =
  | Extract<keyof FileIndexSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type WeChatOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  
export type MessageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'msgSvrId_ASC'
  | 'msgSvrId_DESC'
  | 'isSend_ASC'
  | 'isSend_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'createTime_ASC'
  | 'createTime_DESC'
  
export type WeChatUserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'alias_ASC'
  | 'alias_DESC'
  | 'conRemark_ASC'
  | 'conRemark_DESC'
  | 'nickname_ASC'
  | 'nickname_DESC'
  
export type ChatRoomOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'nickname_ASC'
  | 'nickname_DESC'
  | 'displayName_ASC'
  | 'displayName_DESC'
  | 'modifyTime_ASC'
  | 'modifyTime_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'password_ASC'
  | 'password_DESC'
  
export type AvatarOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  
export type ContactOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  
export type ContentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  
export type TextOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'textMsg_ASC'
  | 'textMsg_DESC'
  
export type ImageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  
export type VoiceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'voiceLength_ASC'
  | 'voiceLength_DESC'
  
export type VideoOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'videolength_ASC'
  | 'videolength_DESC'
  
export type FileOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'size_ASC'
  | 'size_DESC'
  
export type AppOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'xml_ASC'
  | 'xml_DESC'
  
export type FileIndexOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'fileName_ASC'
  | 'fileName_DESC'
  | 'mimetype_ASC'
  | 'mimetype_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'url_ASC'
  | 'url_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  